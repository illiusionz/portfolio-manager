{"version":3,"file":"static/js/854.1eb9257f.chunk.js","mappings":"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","sources":["api/openAiApi.js","components/ChatAgent/ChatAgent.js","pages/ChartAnalysisPage/ChartAnalysisPage.js"],"sourcesContent":["const API_URL = 'http://localhost:5001/api';\n\nexport const testOpenAI = async (message) => {\n  try {\n    console.log('Sending message to OpenAI API:', message);\n    const response = await fetch(`${API_URL}/test-openai`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ message }),\n    });\n\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      console.error('Error response from OpenAI API:', errorDetails);\n      throw new Error(`Network response was not ok: ${errorDetails.error}`);\n    }\n\n    const data = await response.json();\n    console.log('Received response from OpenAI API:', data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching OpenAI test data:', error);\n    throw error;\n  }\n};\n\nexport const uploadChartForAnalysis = async (file) => {\n  const formData = new FormData();\n  formData.append('file', file);\n\n  try {\n    console.log('Uploading file to OpenAI API:', file);\n    const response = await fetch(`${API_URL}/upload-chart`, {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      console.error('Error response from OpenAI API:', errorDetails);\n      throw new Error(`Network response was not ok: ${errorDetails.error}`);\n    }\n\n    const data = await response.json();\n    console.log('Received response from OpenAI API:', data);\n    return data;\n  } catch (error) {\n    console.error('Error uploading chart:', error);\n    throw error;\n  }\n};\n\nexport const uploadImageForAnalysis = async (file) => {\n  const formData = new FormData();\n  formData.append('file', file);\n\n  try {\n    console.log('Uploading file to OpenAI API:', file);\n    const response = await fetch(`${API_URL}/upload-image`, {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorDetails = await response.json();\n      console.error('Error response from OpenAI API:', errorDetails);\n      throw new Error(`Network response was not ok: ${errorDetails.error}`);\n    }\n\n    const data = await response.json();\n    console.log('Received response from OpenAI API:', data);\n    return data;\n  } catch (error) {\n    console.error('Error uploading image:', error);\n    throw error;\n  }\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperclip, faPaperPlane } from '@fortawesome/free-solid-svg-icons';\nimport './_chatAgent.scss';\nimport {\n  testOpenAI,\n  uploadChartForAnalysis,\n  uploadImageForAnalysis,\n} from '../../api/openAiApi';\n\nconst ChatAgent = () => {\n  const [input, setInput] = useState('');\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [lastRequestTime, setLastRequestTime] = useState(0);\n  const RATE_LIMIT_DELAY = 1000; // 1 second\n  const [file, setFile] = useState(null);\n  const [fileType, setFileType] = useState('');\n  const [messages, setMessages] = useState([]);\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [input]);\n\n  const handleSend = async () => {\n    const currentTime = new Date().getTime();\n    if (currentTime - lastRequestTime < RATE_LIMIT_DELAY) {\n      alert('Please wait a moment before making another request.');\n      return;\n    }\n\n    setLoading(true);\n    setMessages([...messages, { role: 'user', content: input }]);\n    try {\n      let result;\n      if (file) {\n        console.log('Uploading file:', file);\n        if (fileType === 'image') {\n          result = await uploadImageForAnalysis(file);\n        } else {\n          result = await uploadChartForAnalysis(file);\n        }\n      } else {\n        console.log('Sending message:', input);\n        result = await testOpenAI(input);\n      }\n      console.log('Received response:', result);\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { role: 'assistant', content: result.content },\n      ]);\n      setResponse(result.content);\n      setLastRequestTime(currentTime);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      alert('Failed to send message. Please try again.');\n    } finally {\n      setLoading(false);\n      setFile(null); // Clear file after upload\n      setInput(''); // Clear input field\n    }\n  };\n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const handleFileChange = (event) => {\n    const selectedFile = event.target.files[0];\n    const allowedTypes = [\n      'text/csv',\n      'application/json',\n      'image/png',\n      'image/jpeg',\n    ];\n    if (selectedFile && !allowedTypes.includes(selectedFile.type)) {\n      alert('Please upload a CSV, JSON, PNG, or JPEG file.');\n      setFile(null);\n      setFileType('');\n    } else {\n      setFile(selectedFile);\n      setFileType(selectedFile.type.startsWith('image') ? 'image' : 'chart');\n    }\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleSend();\n    }\n  };\n\n  const handleDrop = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    const selectedFile = event.dataTransfer.files[0];\n    const allowedTypes = [\n      'text/csv',\n      'application/json',\n      'image/png',\n      'image/jpeg',\n    ];\n    if (selectedFile && !allowedTypes.includes(selectedFile.type)) {\n      alert('Please upload a CSV, JSON, PNG, or JPEG file.');\n      setFile(null);\n      setFileType('');\n    } else {\n      setFile(selectedFile);\n      setFileType(selectedFile.type.startsWith('image') ? 'image' : 'chart');\n    }\n  };\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <div className='chat-agent' onDrop={handleDrop} onDragOver={handleDragOver}>\n      <div className='messages'>\n        {messages.map((msg, index) => (\n          <div key={index} className={`message ${msg.role}`}>\n            {msg.content}\n          </div>\n        ))}\n      </div>\n      <div className='input-container'>\n        <label className='file-label' htmlFor='file-upload'>\n          <FontAwesomeIcon icon={faPaperclip} className='file-upload-icon' />\n          <input\n            type='file'\n            id='file-upload'\n            onChange={handleFileChange}\n            aria-label='File upload'\n          />\n        </label>\n        <textarea\n          ref={textareaRef}\n          value={input}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          placeholder='Type your message here...'\n          aria-label='Chat input'\n          rows='1'\n        />\n        <button\n          onClick={handleSend}\n          disabled={loading}\n          aria-label='Send message'>\n          <FontAwesomeIcon icon={faPaperPlane} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatAgent;\n","import React from 'react';\nimport ChatAgent from '../../components/ChatAgent/ChatAgent';\nimport './ChartAnalysisPage.scss';\n\nconst ChartAnalysisPage = () => {\n  return (\n    <div className='chart-analysis-page'>\n      <ChatAgent />\n    </div>\n  );\n};\n\nexport default ChartAnalysisPage;\n"],"names":["API_URL","ChatAgent","input","setInput","useState","response","setResponse","loading","setLoading","lastRequestTime","setLastRequestTime","file","setFile","fileType","setFileType","messages","setMessages","textareaRef","useRef","useEffect","current","style","height","scrollHeight","handleSend","async","currentTime","Date","getTime","alert","role","content","result","console","log","formData","FormData","append","fetch","method","body","ok","errorDetails","json","error","Error","data","uploadImageForAnalysis","uploadChartForAnalysis","message","headers","JSON","stringify","testOpenAI","prevMessages","_jsxs","className","onDrop","event","preventDefault","stopPropagation","selectedFile","dataTransfer","files","includes","type","startsWith","onDragOver","children","_jsx","map","msg","index","htmlFor","FontAwesomeIcon","icon","faPaperclip","id","onChange","target","ref","value","onKeyDown","key","shiftKey","placeholder","rows","onClick","disabled","faPaperPlane","ChartAnalysisPage"],"sourceRoot":""}