{"version":3,"file":"static/js/887.64aa27fa.chunk.js","mappings":"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","sources":["components/shared/SymbolAutoSuggest.js","features/user/userThunks.js","layout/NavBar/NavBar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { setSymbolAndFetchData } from '../../features/user/userThunks';\nimport './_symbolAutoSuggest.scss';\n\nconst SymbolAutoSuggest = () => {\n  const dispatch = useDispatch();\n  const selectedSymbol = useSelector((state) => state.user.symbol); // Redux state for the selected symbol\n  const [query, setQuery] = useState(''); // Local state for the input value\n  const [suggestions, setSuggestions] = useState([]);\n  const apiKey = process.env.REACT_APP_POLYGON_API_KEY;\n\n  // Sync the local query state with the Redux selectedSymbol on mount and whenever selectedSymbol changes\n  useEffect(() => {\n    // Check localStorage for a saved stock symbol and update Redux\n    const savedSymbol = localStorage.getItem('selectedStockSymbol');\n    if (savedSymbol && !selectedSymbol) {\n      dispatch(setSymbolAndFetchData(savedSymbol)); // Update Redux with the saved symbol\n    }\n\n    if (selectedSymbol) {\n      setQuery(selectedSymbol); // Update local input if Redux has the symbol\n    }\n  }, [selectedSymbol, dispatch]);\n\n  // Fetch suggestions based on the current input value\n  const onSuggestionsFetchRequested = async ({ value }) => {\n    if (value.length < 1) {\n      setSuggestions([]);\n      return;\n    }\n    try {\n      const response = await axios.get(\n        `https://api.polygon.io/v3/reference/tickers?search=${value}&active=true&sort=ticker&order=asc&limit=10&apiKey=${apiKey}`\n      );\n      setSuggestions(response.data.results || []);\n    } catch (error) {\n      console.error('Error fetching suggestions:', error);\n      setSuggestions([]);\n    }\n  };\n\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  // Handle when a suggestion is selected from the dropdown\n  const onSuggestionSelected = (event, { suggestion }) => {\n    const selectedSymbol = suggestion.ticker;\n    setQuery(selectedSymbol); // Update the input field to show the selected symbol\n    dispatch(setSymbolAndFetchData(selectedSymbol)); // Dispatch to update Redux with the new symbol\n\n    // Save the selected symbol to localStorage for persistence\n    localStorage.setItem('selectedStockSymbol', selectedSymbol);\n  };\n\n  const inputProps = {\n    placeholder: 'Search for a stock',\n    value: query, // Sync the input field with the local query state\n    onChange: (event, { newValue }) => {\n      setQuery(newValue); // Update the local input state only when typing\n    },\n  };\n\n  return (\n    <div className='symbol-auto-suggest'>\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        getSuggestionValue={(suggestion) => suggestion.ticker}\n        renderSuggestion={(suggestion) => (\n          <div className='suggestion-item'>\n            <span className='suggestion-ticker'>{suggestion.ticker}</span>\n            <span className='suggestion-name'>{suggestion.name}</span>\n          </div>\n        )}\n        inputProps={inputProps}\n        onSuggestionSelected={onSuggestionSelected} // Dispatch to Redux and persist to localStorage on suggestion selection\n      />\n    </div>\n  );\n};\n\nexport default SymbolAutoSuggest;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { setUserSymbol } from './userSlice';\nimport { fetchStockSnapshot } from '../stocks/stockThunks';\nimport { fetchNews } from '../news/newsThunks';\nimport { fetchWatchlistData } from '../watchlist/watchlistThunks';\n\nexport const setSymbolAndFetchData = createAsyncThunk(\n  'user/setSymbolAndFetchData',\n  async (symbol, { dispatch }) => {\n    dispatch(setUserSymbol(symbol));\n    await dispatch(fetchStockSnapshot(symbol));\n    await dispatch(fetchNews(symbol));\n    await dispatch(fetchWatchlistData([symbol]));\n  }\n);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faBars,\n  faSun,\n  faMoon,\n  faSearch,\n} from '@fortawesome/free-solid-svg-icons';\nimport './_navBar.scss';\nimport { setTheme } from '../../features/theme/themeSlice'; // Redux slice\nimport profileImage from '../../assets/images/user-image.jpg';\nimport SymbolAutoSuggest from '../../components/shared/SymbolAutoSuggest'; // Importing shared autosuggest\nimport { setSymbolAndFetchData } from '../../features/user/userThunks'; // Unified action\nimport { addToWatchlist } from '../../features/watchlist/watchlistSlice'; // Corrected path\n\nconst Navbar = ({ toggleSidebar, handleSymbolSearch }) => {\n  const symbol = useSelector((state) => state.user.symbol); // Get the selected symbol from Redux\n  const theme = useSelector((state) => state.theme);\n  const watchlist = useSelector((state) => state.watchlist.symbols);\n\n  const dispatch = useDispatch();\n\n  // Fetch saved theme from local storage\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      dispatch(setTheme(savedTheme));\n    }\n  }, [dispatch]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (symbol) {\n      dispatch(setSymbolAndFetchData(symbol)); // Unified action to fetch and sync symbol\n    }\n  };\n\n  const onAddToWatchlist = () => {\n    if (symbol && !watchlist.includes(symbol)) {\n      dispatch(addToWatchlist(symbol));\n    }\n  };\n\n  useEffect(() => {\n    document.body.className = theme === 'dark' ? 'theme-dark' : 'theme-light';\n  }, [theme]);\n\n  const handleToggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    dispatch(setTheme(newTheme)); // Toggle theme and persist in local storage\n    localStorage.setItem('theme', newTheme);\n  };\n\n  return (\n    <nav className='navbar navbar-expand-lg'>\n      <button className='btn btn-primary' onClick={toggleSidebar}>\n        <FontAwesomeIcon icon={faBars} />\n      </button>\n      <form className='form-inline my-2 my-lg-0' onSubmit={onSubmit}>\n        <div className='input-group'>\n          <SymbolAutoSuggest /> {/* Symbol synced via Redux */}\n        </div>\n        <button className='btn btn-primary ms-1 my-2 my-sm-0' type='submit'>\n          <FontAwesomeIcon icon={faSearch} />\n        </button>\n        <button\n          className='btn btn-primary ms-1  my-2 my-sm-0'\n          type='button'\n          onClick={onAddToWatchlist}>\n          Add to Watch List\n        </button>\n      </form>\n      <button\n        className='btn btn-light ms-auto my-2 my-sm-0 theme-toggle'\n        type='button'\n        onClick={handleToggleTheme}>\n        <FontAwesomeIcon icon={theme === 'dark' ? faSun : faMoon} />\n      </button>\n      <ul className='navbar-nav navbar-align'>\n        <li className='nav-item dropdown'>\n          <div className='nav-link dropdown-toggle'>\n            <img src={profileImage} alt='User' className='user-image' />\n            <span className='user-name'>Jeff Liu</span>\n          </div>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n"],"names":["SymbolAutoSuggest","dispatch","useDispatch","selectedSymbol","useSelector","state","user","symbol","query","setQuery","useState","suggestions","setSuggestions","useEffect","savedSymbol","localStorage","getItem","setSymbolAndFetchData","inputProps","placeholder","value","onChange","event","_ref3","newValue","_jsx","className","children","Autosuggest","onSuggestionsFetchRequested","async","_ref","length","response","axios","get","data","results","error","console","onSuggestionsClearRequested","getSuggestionValue","suggestion","ticker","renderSuggestion","_jsxs","name","onSuggestionSelected","_ref2","setItem","createAsyncThunk","setUserSymbol","fetchStockSnapshot","fetchNews","fetchWatchlistData","toggleSidebar","handleSymbolSearch","theme","watchlist","symbols","savedTheme","setTheme","document","body","onClick","FontAwesomeIcon","icon","faBars","onSubmit","e","preventDefault","type","faSearch","onAddToWatchlist","includes","addToWatchlist","handleToggleTheme","newTheme","faSun","faMoon","src","alt"],"sourceRoot":""}