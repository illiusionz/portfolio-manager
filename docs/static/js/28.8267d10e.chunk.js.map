{"version":3,"file":"static/js/28.8267d10e.chunk.js","mappings":"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","sources":["components/StockHoverPopup/StockHoverPopup.js","components/TrendingToolbar/TrendingToolbar.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport { addToWatchlist } from '../../features/watchlist/watchlistSlice';\nimport './StockHoverPopup.scss';\n\nconst StockHoverPopup = ({ stock, position, onMouseEnter, onMouseLeave }) => {\n  const dispatch = useDispatch();\n  const popupRef = useRef(null);\n\n  useEffect(() => {\n    const popupElement = popupRef.current;\n    if (popupElement && position) {\n      // Set the position of the popup dynamically below the hovered stock item\n      popupElement.style.top = `${position.top + position.height + 10}px`; // Place it below the stock item with some margin\n      popupElement.style.left = `${position.left}px`; // Align with the left edge of the stock item\n    }\n  }, [position]);\n\n  if (!stock) return null;\n\n  const changePercent = stock.todaysChangePerc.toFixed(2);\n  const changeClass = changePercent >= 0 ? 'positive' : 'negative';\n  const arrowIcon = changePercent >= 0 ? faArrowUp : faArrowDown;\n\n  const handleAddToWatchlist = () => {\n    dispatch(addToWatchlist(stock.ticker));\n    console.log(`Added ${stock.ticker} to watchlist`);\n  };\n\n  return (\n    <div\n      ref={popupRef}\n      className='stock-hover-popup'\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}>\n      <div className='popup-header'>\n        <div className='popup-ticker'>\n          <span className='stock-symbol'>{stock.ticker}</span>\n          <span className='stock-name'>{stock.name}</span>\n        </div>\n        <button className='watch-button' onClick={handleAddToWatchlist}>\n          Watch\n        </button>\n      </div>\n      <div className='popup-price'>\n        <span className='stock-price'>${stock.price}</span>\n        <span className={`price-change ${changeClass}`}>\n          <FontAwesomeIcon icon={arrowIcon} /> {stock.priceChange} (\n          {changePercent}%)\n        </span>\n      </div>\n      <div className='popup-chart'>\n        {/* Placeholder for chart */}\n        <div className='line-chart'></div>\n      </div>\n      <div className='popup-description'>\n        {stock.description || 'No description available.'}\n      </div>\n    </div>\n  );\n};\n\nexport default StockHoverPopup;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faArrowUp,\n  faArrowDown,\n  faCircleInfo,\n} from '@fortawesome/free-solid-svg-icons';\nimport './TrendingToolbar.scss';\nimport StockHoverPopup from '../StockHoverPopup/StockHoverPopup';\nimport { useDispatch } from 'react-redux';\n\nconst TrendingToolbar = () => {\n  const dispatch = useDispatch();\n  const [indexData, setIndexData] = useState({});\n  const [trendingStocks, setTrendingStocks] = useState([]);\n  const [hoveredStock, setHoveredStock] = useState(null);\n  const [hoverPosition, setHoverPosition] = useState({\n    top: 0,\n    left: 0,\n    height: 0,\n  });\n  const [showPercentChange, setShowPercentChange] = useState(true);\n  const [isPaused, setIsPaused] = useState(false); // State to control animation pause\n\n  let hoverTimeout = null;\n  const toolbarRef = useRef(null);\n  const manualStocks = [\n    'AAPL',\n    'AMZN',\n    'GOOG',\n    'SHOP',\n    'AFRM',\n    'GME',\n    'ADBE',\n    'TSLA',\n    'MSFT',\n    'NVDA',\n    'AMD',\n    'PYPL',\n    'NFLX',\n    'SNAP',\n    'SPOT',\n    'PINS',\n    'TSM',\n    'UBER',\n    'LYFT',\n    'SQ',\n    'ROKU',\n    'CRWD',\n    'DOCU',\n    'META',\n    'PLTR',\n    'AVGO',\n    'OKTA',\n    'RIVN',\n    'PDD',\n    'DDOG',\n    'AMC',\n    'BA',\n    'BABA',\n    'BAC',\n    'C',\n    'DIS',\n    'F',\n    'GE',\n    'GME',\n    'GS',\n    'HD',\n    'IBM',\n    'INTC',\n    'JNJ',\n    'JPM',\n    'KO',\n    'MCD',\n    'SMCI',\n    'HOOD',\n    'OXY',\n    'NKE',\n    'PFE',\n    'PG',\n    'MRVL',\n    'UNH',\n    'V',\n    'VZ',\n    'WBA',\n    'ARM',\n    'XOM',\n  ];\n  const indexTickers = ['SPY', 'QQQ', 'IWM', 'DIA'];\n\n  const apiKey = process.env.REACT_APP_POLYGON_API_KEY;\n\n  useEffect(() => {\n    const fetchData = async (ticker, isIndex = false) => {\n      try {\n        const response = await fetch(\n          `https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/tickers/${ticker}?apiKey=${apiKey}`\n        );\n        const data = await response.json();\n        if (isIndex) {\n          setIndexData((prevData) => ({ ...prevData, [ticker]: data.ticker }));\n        } else {\n          return data.ticker;\n        }\n      } catch (error) {\n        console.error(`Error fetching data for ${ticker}:`, error);\n        return null;\n      }\n    };\n\n    const fetchTrendingStocks = async () => {\n      const stockDataPromises = manualStocks.map((ticker) => fetchData(ticker));\n      const stockData = await Promise.all(stockDataPromises);\n      setTrendingStocks(stockData.filter((stock) => stock !== null));\n    };\n\n    indexTickers.forEach((ticker) => fetchData(ticker, true));\n    fetchTrendingStocks();\n  }, [apiKey]);\n\n  const handleMouseEnter = (stock, event) => {\n    if (hoverTimeout) clearTimeout(hoverTimeout);\n    const stockItemRect = event.currentTarget.getBoundingClientRect();\n    setHoveredStock(stock);\n    setHoverPosition({\n      top: stockItemRect.top + window.scrollY,\n      left: stockItemRect.left + window.scrollX,\n      height: stockItemRect.height,\n    });\n    setIsPaused(true); // Pause the animation\n  };\n\n  const handleMouseLeave = () => {\n    if (hoverTimeout) clearTimeout(hoverTimeout);\n    hoverTimeout = setTimeout(() => {\n      setHoveredStock(null);\n      setIsPaused(false); // Resume the animation\n    }, 200);\n  };\n\n  const handlePopupMouseEnter = () => {\n    if (hoverTimeout) clearTimeout(hoverTimeout);\n    setIsPaused(true); // Pause the animation\n  };\n\n  const handlePopupMouseLeave = () => {\n    hoverTimeout = setTimeout(() => {\n      setHoveredStock(null);\n      setIsPaused(false); // Resume the animation\n    }, 200);\n  };\n\n  const renderStock = (stock, index) => {\n    if (!stock) return null;\n    const changePercent = stock.todaysChangePerc.toFixed(2);\n    const changeClass = changePercent >= 0 ? 'positive' : 'negative';\n    const arrowIcon = changePercent >= 0 ? faArrowUp : faArrowDown;\n\n    return (\n      <div\n        key={`${stock.ticker}-${index}`}\n        className={`stock-item ${changeClass}`}\n        onMouseEnter={(e) => handleMouseEnter(stock, e)}\n        onMouseLeave={handleMouseLeave}>\n        <span className='stock-symbol'>{stock.ticker}</span>\n        {showPercentChange ? (\n          <>\n            <FontAwesomeIcon icon={arrowIcon} />\n            <span className='stock-percent'>{changePercent}%</span>\n          </>\n        ) : (\n          <span className='stock-price'>${stock.day.c.toFixed(2)}</span>\n        )}\n      </div>\n    );\n  };\n\n  const renderIndexData = (ticker) => {\n    const data = indexData[ticker];\n    if (!data) return null;\n    const changePercent = data.todaysChangePerc.toFixed(2);\n    const changeClass = changePercent >= 0 ? 'positive' : 'negative';\n    const arrowIcon = changePercent >= 0 ? faArrowUp : faArrowDown;\n\n    return (\n      <div key={ticker} className={`index-item ${changeClass}`}>\n        <span className='stock-symbol'>{data.ticker}</span>\n        {showPercentChange ? (\n          <>\n            <FontAwesomeIcon icon={arrowIcon} />\n            <span className='stock-percent'>{changePercent}%</span>\n          </>\n        ) : (\n          <span className='stock-price'>${data.day.c.toFixed(2)}</span>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div\n      className={`trending-toolbar ${isPaused ? 'paused' : ''}`}\n      ref={toolbarRef}>\n      <div className='form-check form-switch'>\n        <input\n          className='form-check-input'\n          type='checkbox'\n          id='toggleSwitch'\n          checked={showPercentChange}\n          onChange={() => setShowPercentChange(!showPercentChange)}\n        />\n      </div>\n      <div className='index-data'>\n        {indexTickers.map((ticker) => renderIndexData(ticker))}\n        <span className='trending-label text-secondary'>\n          Trending <FontAwesomeIcon icon={faCircleInfo} />\n        </span>\n      </div>\n      <div className='trending-stocks'>\n        <div className='scroll-container'>\n          {[...trendingStocks, ...trendingStocks].map(renderStock)}\n        </div>\n      </div>\n      {hoveredStock && (\n        <StockHoverPopup\n          stock={hoveredStock}\n          position={hoverPosition}\n          onMouseEnter={handlePopupMouseEnter}\n          onMouseLeave={handlePopupMouseLeave}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default TrendingToolbar;\n"],"names":["_ref","stock","position","onMouseEnter","onMouseLeave","dispatch","useDispatch","popupRef","useRef","useEffect","popupElement","current","style","top","height","left","changePercent","todaysChangePerc","toFixed","changeClass","arrowIcon","faArrowUp","faArrowDown","_jsxs","ref","className","children","_jsx","ticker","name","onClick","handleAddToWatchlist","addToWatchlist","console","log","price","FontAwesomeIcon","icon","priceChange","description","TrendingToolbar","indexData","setIndexData","useState","trendingStocks","setTrendingStocks","hoveredStock","setHoveredStock","hoverPosition","setHoverPosition","showPercentChange","setShowPercentChange","isPaused","setIsPaused","hoverTimeout","toolbarRef","manualStocks","indexTickers","apiKey","process","fetchData","async","isIndex","arguments","length","undefined","response","fetch","data","json","prevData","error","forEach","stockDataPromises","map","stockData","Promise","all","filter","fetchTrendingStocks","handleMouseLeave","clearTimeout","setTimeout","type","id","checked","onChange","_Fragment","day","c","renderIndexData","faCircleInfo","renderStock","index","e","handleMouseEnter","event","stockItemRect","currentTarget","getBoundingClientRect","window","scrollY","scrollX","StockHoverPopup","handlePopupMouseEnter","handlePopupMouseLeave"],"sourceRoot":""}