{"version":3,"file":"static/js/388.92ad70b2.chunk.js","mappings":"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","sources":["components/DollarCostAveragingCalculator/DollarCostAveragingCalculator.js","utils/format.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './_dollarCostAveragingCalculator.scss';\nimport {\n  formatNumberWithCommas,\n  formatCurrency,\n  parseCurrency,\n} from '../../utils/format';\n\nconst DollarCostAveragingCalculator = () => {\n  const [investments, setInvestments] = useState([\n    { shares: '100', avgBuy: '', totalCost: '' },\n    { shares: '', avgBuy: '', totalCost: '' }, // Second row shown by default\n  ]);\n  const [result, setResult] = useState({\n    shares: 0,\n    avgBuy: '0.00',\n    totalCost: 0,\n  });\n\n  // Handles the change in any input field (shares, avgBuy) and recalculates totalCost\n  const handleInputChange = (index, field, value) => {\n    const newInvestments = investments.slice();\n    if (field === 'avgBuy' || field === 'shares') {\n      value = value.replace(/[^0-9.]/g, ''); // Ensure only numbers and decimals\n    }\n\n    newInvestments[index][field] = value;\n\n    // Recalculate totalCost whenever shares or avgBuy are changed\n    if (field === 'shares' || field === 'avgBuy') {\n      const shares = parseFloat(newInvestments[index].shares || 0);\n      const avgBuy = parseFloat(newInvestments[index].avgBuy || 0);\n      newInvestments[index].totalCost = shares * avgBuy || '';\n    }\n\n    setInvestments(newInvestments);\n    calculateResult(newInvestments);\n  };\n\n  const handleAddRow = () => {\n    setInvestments([...investments, { shares: '', avgBuy: '', totalCost: '' }]);\n  };\n\n  const handleClearRow = () => {\n    if (investments.length > 1) {\n      const newInvestments = investments.slice(0, -1);\n      setInvestments(newInvestments);\n      calculateResult(newInvestments);\n    }\n  };\n\n  const handleReset = () => {\n    const resetInvestments = [\n      { shares: '', avgBuy: '', totalCost: '' },\n      { shares: '', avgBuy: '', totalCost: '' }, // Resetting to show two rows by default\n    ];\n    setInvestments(resetInvestments);\n    setResult({ shares: 0, avgBuy: '0.00', totalCost: 0 });\n  };\n\n  const calculateResult = (currentInvestments) => {\n    const totalShares = currentInvestments.reduce(\n      (acc, inv) => acc + parseFloat(inv.shares || 0),\n      0\n    );\n    const totalCost = currentInvestments.reduce(\n      (acc, inv) => acc + parseFloat(inv.totalCost || 0),\n      0\n    );\n    const avgBuy = totalShares ? (totalCost / totalShares).toFixed(2) : '0.00';\n\n    const calculationResult = {\n      shares: totalShares,\n      avgBuy: formatCurrency(avgBuy),\n      totalCost: formatCurrency(totalCost),\n    };\n\n    setResult(calculationResult);\n  };\n\n  useEffect(() => {\n    calculateResult(investments);\n  }, []);\n\n  return (\n    <div className='dca-calculator card'>\n      <div className='card-header'>\n        <h5 className='card-title mb-0'>Dollar Cost Averaging Calculator</h5>\n      </div>\n      <div className='card-body'>\n        {investments.map((investment, index) => (\n          <div key={index} className='investment-row mb-3'>\n            <h6>\n              <strong>Investment {index + 1}</strong>\n            </h6>\n            <div className='form-row mb-2'>\n              <div className='col'>\n                <label className='form-label'>Shares</label>\n                <input\n                  type='text'\n                  className='form-control'\n                  id='shares'\n                  value={investment.shares}\n                  onChange={(e) =>\n                    handleInputChange(index, 'shares', e.target.value)\n                  }\n                  placeholder='0.00'\n                />\n              </div>\n              <div className='col'>\n                <label className='form-label'>Avg Buy</label>\n                <input\n                  type='text'\n                  className='form-control'\n                  id='avgBuy'\n                  value={\n                    investment.avgBuy ? formatCurrency(investment.avgBuy) : ''\n                  }\n                  placeholder='$0.00'\n                  onChange={(e) =>\n                    handleInputChange(index, 'avgBuy', e.target.value)\n                  }\n                />\n              </div>\n              <div className='col'>\n                <label className='form-label'>Total Cost</label>\n                <input\n                  type='text'\n                  className='form-control'\n                  id='totalCost'\n                  value={\n                    investment.totalCost\n                      ? formatCurrency(investment.totalCost)\n                      : ''\n                  }\n                  placeholder='$0.00'\n                  readOnly\n                />\n              </div>\n            </div>\n          </div>\n        ))}\n        <div className='button-group max-auto mb-3'>\n          <button\n            className='btn btn-primary'\n            onClick={() => calculateResult(investments)}>\n            Calculate\n          </button>\n          <button className='btn btn-success me-2' onClick={handleAddRow}>\n            Add\n          </button>\n          <button className='btn btn-warning me-2' onClick={handleClearRow}>\n            Clear\n          </button>\n          <button className='btn btn-danger' onClick={handleReset}>\n            Reset\n          </button>\n        </div>\n        {result && (\n          <div className='result'>\n            <h6 className='result-title'>\n              <strong>Result</strong>\n            </h6>\n            <div className='form-row'>\n              <div className='col'>\n                <h6>\n                  <strong>Shares:</strong>{' '}\n                  {formatNumberWithCommas(result.shares)}\n                </h6>\n              </div>\n              <div className='col'>\n                <h6>\n                  <strong>Avg Buy:</strong> {result.avgBuy}\n                </h6>\n              </div>\n              <div className='col'>\n                <h6>\n                  <strong>Total Cost:</strong> {result.totalCost}\n                </h6>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DollarCostAveragingCalculator;\n","// format.js\n\n// Function to format a numeric value as a currency string\nexport const formatCurrency = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and remove any non-numeric characters except for periods\n  value = value.toString().replace(/[^0-9.]/g, '');\n\n  // Split the value into integer and decimal parts\n  const parts = value.split('.');\n\n  // Add commas to the integer part of the number for better readability\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  // Join the integer and decimal parts back together and prepend a dollar sign\n  return `$${parts.join('.')}`;\n};\n\n// Function to parse a currency string back into a numeric value\nexport const parseCurrency = (value) => {\n  // Return 0 if the value is null or undefined\n  if (!value) return 0;\n\n  // Remove any non-numeric characters except for periods and convert the result to a float\n  return parseFloat(value.replace(/[^0-9.]/g, '')) || 0;\n};\n\n// Function to format a numeric value with commas as thousand separators\nexport const formatNumberWithCommas = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and add commas as thousand separators\n  return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n"],"names":["DollarCostAveragingCalculator","investments","setInvestments","useState","shares","avgBuy","totalCost","result","setResult","handleInputChange","index","field","value","newInvestments","slice","replace","parseFloat","calculateResult","currentInvestments","totalShares","reduce","acc","inv","toFixed","calculationResult","formatCurrency","useEffect","_jsxs","className","children","_jsx","map","investment","type","id","onChange","e","target","placeholder","readOnly","onClick","handleAddRow","handleClearRow","length","handleReset","formatNumberWithCommas","parts","toString","split","join","parseCurrency"],"sourceRoot":""}