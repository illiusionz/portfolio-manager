{"version":3,"file":"static/js/947.a7aeffdb.chunk.js","mappings":"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","sources":["components/PercentageDifferenceCalculator/PercentageDifferenceCalculator.js","components/shared/SymbolAutoSuggest.js","features/user/userThunks.js","utils/format.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './_percentageDifferenceCalculator.scss';\nimport { fetchStockPrice } from '../../features/stocks/stockThunks';\nimport { setUserSymbol } from '../../features/user/userSlice';\nimport {\n  formatNumberWithCommas,\n  formatCurrency,\n  parseCurrency,\n} from '../../utils/format';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowsRotate } from '@fortawesome/free-solid-svg-icons';\nimport SymbolAutoSuggest from '../shared/SymbolAutoSuggest'; // Using shared SymbolAutoSuggest component\nimport { setSymbolAndFetchData } from '../../features/user/userThunks'; // Unified action\n\nconst PercentageDifferenceCalculator = () => {\n  const symbol = useSelector((state) => state.user.symbol); // Using symbol from Redux\n  const stockPrice = useSelector((state) => state.stocks.data); // Get stock price from Redux\n  const dispatch = useDispatch();\n\n  const [targetPrice, setTargetPrice] = useState('');\n  const [currentPrice, setCurrentPrice] = useState('');\n  const [percentageChange, setPercentageChange] = useState('0.00');\n  const [isRotating, setIsRotating] = useState(false);\n\n  useEffect(() => {\n    calculatePercentageChange();\n  }, [targetPrice, currentPrice]);\n\n  useEffect(() => {\n    if (symbol) {\n      dispatch(setSymbolAndFetchData(symbol)); // Use the unified action\n    }\n  }, [symbol, dispatch]);\n\n  useEffect(() => {\n    if (stockPrice) {\n      setCurrentPrice(formatCurrency(stockPrice.toFixed(2))); // Set the strike price based on stock price\n    }\n  }, [stockPrice]);\n\n  const calculatePercentageChange = () => {\n    if (!currentPrice || !targetPrice) {\n      setPercentageChange('0.00');\n      return;\n    }\n    const change =\n      ((parseCurrency(targetPrice) - parseCurrency(currentPrice)) /\n        parseCurrency(currentPrice)) *\n      100;\n    setPercentageChange(isNaN(change) ? '0.00' : change.toFixed(2));\n  };\n\n  const resetFields = () => {\n    setTargetPrice('');\n    setCurrentPrice(formatCurrency(stockPrice.toFixed(2)));\n    setPercentageChange('0.00');\n  };\n\n  const onSymbolSelected = (selectedSymbol) => {\n    dispatch(setSymbolAndFetchData(symbol)); // Use the unified action\n    resetFields();\n  };\n\n  const handleTargetPriceChange = (event) => {\n    const value = event.target.value.replace(/[^0-9.]/g, '');\n    setTargetPrice(formatCurrency(value));\n  };\n\n  const refreshCurrentPrice = () => {\n    if (symbol) {\n      dispatch(fetchStockPrice(symbol))\n        .unwrap()\n        .then((result) => {\n          if (result.day && result.day.c) {\n            const stockPrice = result.day.c;\n            setCurrentPrice(formatCurrency(stockPrice.toFixed(2)));\n          } else {\n            console.warn('No price data available');\n            setCurrentPrice('$0.00');\n          }\n          setIsRotating(true);\n          setTimeout(() => setIsRotating(false), 500);\n        })\n        .catch((error) => {\n          console.error('Error refreshing stock price:', error);\n        });\n    } else {\n      console.warn('No symbol selected for refresh');\n    }\n  };\n\n  return (\n    <div className='percentage-difference-calculator'>\n      <div className='card'>\n        <div className='card-header'>\n          <h5 className='card-title mb-0'>Stock Price % Change</h5>\n          <FontAwesomeIcon\n            icon={faArrowsRotate}\n            className={`card-refresh ${isRotating ? 'rotating' : ''}`}\n            onClick={refreshCurrentPrice}\n          />\n        </div>\n        <div className='card-body'>\n          <form onSubmit={(e) => e.preventDefault()}>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='stockName'>\n                Stock Name:\n              </label>\n              <SymbolAutoSuggest onSuggestionSelected={onSymbolSelected} />\n            </div>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='currentPrice'>\n                Current Price:\n              </label>\n              <input\n                type='text'\n                id='currentPrice'\n                className='form-control'\n                value={currentPrice}\n                readOnly\n                placeholder='$0.00'\n              />\n            </div>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='targetPrice'>\n                Target Price:\n              </label>\n              <input\n                type='text'\n                id='targetPrice'\n                className='form-control'\n                value={targetPrice}\n                onChange={handleTargetPriceChange}\n                placeholder='$0.00'\n              />\n            </div>\n\n            <div className='button-group'>\n              <button\n                type='button'\n                className='btn btn-primary'\n                onClick={calculatePercentageChange}>\n                Calculate\n              </button>\n              <button\n                type='button'\n                className='btn btn-danger'\n                onClick={resetFields}>\n                Reset\n              </button>\n            </div>\n          </form>\n          <div className='result mt-3'>\n            <h6>\n              <strong>Percent Change:</strong> {percentageChange}%\n            </h6>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PercentageDifferenceCalculator;\n","import React, { useState, useEffect } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { setSymbolAndFetchData } from '../../features/user/userThunks';\nimport './_symbolAutoSuggest.scss';\n\nconst SymbolAutoSuggest = () => {\n  const dispatch = useDispatch();\n  const selectedSymbol = useSelector((state) => state.user.symbol); // Redux state for the selected symbol\n  const [query, setQuery] = useState(''); // Local state for the input value\n  const [suggestions, setSuggestions] = useState([]);\n  const apiKey = process.env.REACT_APP_POLYGON_API_KEY;\n\n  // Sync the local query state with the Redux selectedSymbol on mount and whenever selectedSymbol changes\n  useEffect(() => {\n    // Check localStorage for a saved stock symbol and update Redux\n    const savedSymbol = localStorage.getItem('selectedStockSymbol');\n    if (savedSymbol && !selectedSymbol) {\n      dispatch(setSymbolAndFetchData(savedSymbol)); // Update Redux with the saved symbol\n    }\n\n    if (selectedSymbol) {\n      setQuery(selectedSymbol); // Update local input if Redux has the symbol\n    }\n  }, [selectedSymbol, dispatch]);\n\n  // Fetch suggestions based on the current input value\n  const onSuggestionsFetchRequested = async ({ value }) => {\n    if (value.length < 1) {\n      setSuggestions([]);\n      return;\n    }\n    try {\n      const response = await axios.get(\n        `https://api.polygon.io/v3/reference/tickers?search=${value}&active=true&sort=ticker&order=asc&limit=10&apiKey=${apiKey}`\n      );\n      setSuggestions(response.data.results || []);\n    } catch (error) {\n      console.error('Error fetching suggestions:', error);\n      setSuggestions([]);\n    }\n  };\n\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  // Handle when a suggestion is selected from the dropdown\n  const onSuggestionSelected = (event, { suggestion }) => {\n    const selectedSymbol = suggestion.ticker;\n    setQuery(selectedSymbol); // Update the input field to show the selected symbol\n    dispatch(setSymbolAndFetchData(selectedSymbol)); // Dispatch to update Redux with the new symbol\n\n    // Save the selected symbol to localStorage for persistence\n    localStorage.setItem('selectedStockSymbol', selectedSymbol);\n  };\n\n  const inputProps = {\n    placeholder: 'Search for a stock',\n    value: query, // Sync the input field with the local query state\n    onChange: (event, { newValue }) => {\n      setQuery(newValue); // Update the local input state only when typing\n    },\n  };\n\n  return (\n    <div className='symbol-auto-suggest'>\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        getSuggestionValue={(suggestion) => suggestion.ticker}\n        renderSuggestion={(suggestion) => (\n          <div className='suggestion-item'>\n            <span className='suggestion-ticker'>{suggestion.ticker}</span>\n            <span className='suggestion-name'>{suggestion.name}</span>\n          </div>\n        )}\n        inputProps={inputProps}\n        onSuggestionSelected={onSuggestionSelected} // Dispatch to Redux and persist to localStorage on suggestion selection\n      />\n    </div>\n  );\n};\n\nexport default SymbolAutoSuggest;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { setUserSymbol } from './userSlice';\nimport { fetchStockPrice } from '../stocks/stockThunks';\nimport { fetchNews } from '../news/newsThunks';\nimport { fetchWatchlistData } from '../watchlist/watchlistThunks';\n\nexport const setSymbolAndFetchData = createAsyncThunk(\n  'user/setSymbolAndFetchData',\n  async (symbol, { dispatch }) => {\n    dispatch(setUserSymbol(symbol));\n    await dispatch(fetchStockPrice(symbol));\n    await dispatch(fetchNews(symbol));\n    await dispatch(fetchWatchlistData([symbol]));\n  }\n);\n","// format.js\n\n// Function to format a numeric value as a currency string\nexport const formatCurrency = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and remove any non-numeric characters except for periods\n  value = value.toString().replace(/[^0-9.]/g, '');\n\n  // Split the value into integer and decimal parts\n  const parts = value.split('.');\n\n  // Add commas to the integer part of the number for better readability\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  // Join the integer and decimal parts back together and prepend a dollar sign\n  return `$${parts.join('.')}`;\n};\n\n// Function to parse a currency string back into a numeric value\nexport const parseCurrency = (value) => {\n  // Return 0 if the value is null or undefined\n  if (!value) return 0;\n\n  // Remove any non-numeric characters except for periods and convert the result to a float\n  return parseFloat(value.replace(/[^0-9.]/g, '')) || 0;\n};\n\n// Function to format a numeric value with commas as thousand separators\nexport const formatNumberWithCommas = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and add commas as thousand separators\n  return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n"],"names":["PercentageDifferenceCalculator","symbol","useSelector","state","user","stockPrice","stocks","data","dispatch","useDispatch","targetPrice","setTargetPrice","useState","currentPrice","setCurrentPrice","percentageChange","setPercentageChange","isRotating","setIsRotating","useEffect","calculatePercentageChange","setSymbolAndFetchData","formatCurrency","toFixed","change","parseCurrency","isNaN","resetFields","_jsx","className","children","_jsxs","FontAwesomeIcon","icon","faArrowsRotate","onClick","refreshCurrentPrice","fetchStockPrice","unwrap","then","result","day","c","console","warn","setTimeout","catch","error","onSubmit","e","preventDefault","htmlFor","SymbolAutoSuggest","onSuggestionSelected","selectedSymbol","type","id","value","readOnly","placeholder","onChange","event","target","replace","query","setQuery","suggestions","setSuggestions","savedSymbol","localStorage","getItem","inputProps","_ref3","newValue","Autosuggest","onSuggestionsFetchRequested","async","_ref","length","response","axios","get","results","onSuggestionsClearRequested","getSuggestionValue","suggestion","ticker","renderSuggestion","name","_ref2","setItem","createAsyncThunk","setUserSymbol","fetchNews","fetchWatchlistData","parts","toString","split","join","parseFloat","formatNumberWithCommas"],"sourceRoot":""}