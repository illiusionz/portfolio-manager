{"version":3,"file":"static/js/679.9aa2938d.chunk.js","mappings":"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","sources":["components/PercentageDifferenceCalculator/PercentageDifferenceCalculator.js","components/shared/SymbolAutoSuggest.js","features/stocks/stockSelectors.js","features/user/userThunks.js","utils/format.js"],"sourcesContent":["// src/components/PercentageDifferenceCalculator.js\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './PercentageDifferenceCalculator.scss';\nimport { fetchStockSnapshot } from '../../features/stocks/stockThunks';\nimport { selectStockPrice } from '../../features/stocks/stockSelectors'; // Updated selector\nimport { setUserSymbol } from '../../features/user/userSlice';\nimport { formatCurrency, parseCurrency } from '../../utils/format';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowsRotate } from '@fortawesome/free-solid-svg-icons';\nimport SymbolAutoSuggest from '../shared/SymbolAutoSuggest';\n\nconst PercentageDifferenceCalculator = () => {\n  const dispatch = useDispatch();\n\n  // State selectors\n  const userSymbol = useSelector((state) => state.user.userSymbol);\n  const stockPrice = useSelector((state) =>\n    selectStockPrice(state, userSymbol)\n  );\n\n  // Local state management\n  const [targetPrice, setTargetPrice] = useState('');\n  const [currentPrice, setCurrentPrice] = useState('');\n  const [percentageChange, setPercentageChange] = useState('0.00');\n  const [isRotating, setIsRotating] = useState(false);\n\n  useEffect(() => {\n    if (userSymbol) {\n      dispatch(fetchStockSnapshot(userSymbol));\n    }\n  }, [userSymbol, dispatch]);\n\n  useEffect(() => {\n    if (stockPrice) {\n      const formattedPrice = formatCurrency(stockPrice.toFixed(2));\n      setCurrentPrice(formattedPrice);\n    }\n  }, [stockPrice]);\n\n  useEffect(() => {\n    calculatePercentageChange();\n  }, [targetPrice, currentPrice]);\n\n  // Helper functions\n  const calculatePercentageChange = () => {\n    if (!currentPrice || !targetPrice) {\n      setPercentageChange('0.00');\n      return;\n    }\n    const change =\n      ((parseCurrency(targetPrice) - parseCurrency(currentPrice)) /\n        parseCurrency(currentPrice)) *\n      100;\n    setPercentageChange(isNaN(change) ? '0.00' : change.toFixed(2));\n  };\n\n  const resetFields = () => {\n    setTargetPrice('');\n    setPercentageChange('0.00');\n    if (stockPrice) {\n      setCurrentPrice(formatCurrency(stockPrice.toFixed(2)));\n    } else {\n      setCurrentPrice('$0.00');\n    }\n  };\n\n  const onSymbolSelected = (selectedSymbol) => {\n    dispatch(setUserSymbol(selectedSymbol));\n    resetFields();\n  };\n\n  const handleTargetPriceChange = (event) => {\n    const value = event.target.value.replace(/[^0-9.]/g, '');\n    setTargetPrice(formatCurrency(value));\n  };\n\n  const refreshCurrentPrice = () => {\n    if (!userSymbol) {\n      console.warn('No symbol selected for refresh');\n      return;\n    }\n\n    dispatch(fetchStockSnapshot(userSymbol))\n      .unwrap()\n      .then((result) => {\n        if (result?.prevDay?.c) {\n          const price = result.prevDay.c;\n          setCurrentPrice(formatCurrency(price.toFixed(2))); // Correctly set the price\n        } else {\n          console.warn('Stock snapshot did not contain expected data.', result);\n          setCurrentPrice(\n            stockPrice ? formatCurrency(stockPrice.toFixed(2)) : '$0.00'\n          );\n        }\n      })\n      .catch((error) => {\n        console.error('Error refreshing stock price:', error);\n        setCurrentPrice(\n          stockPrice ? formatCurrency(stockPrice.toFixed(2)) : '$0.00'\n        );\n      })\n      .finally(() => {\n        setIsRotating(true);\n        setTimeout(() => setIsRotating(false), 500);\n      });\n  };\n\n  return (\n    <div className='percentage-difference-calculator'>\n      <div className='card'>\n        <div className='card-header'>\n          <h5 className='card-title mb-0'>Stock Price % Change</h5>\n          <FontAwesomeIcon\n            icon={faArrowsRotate}\n            className={`card-refresh ${isRotating ? 'rotating' : ''}`}\n            onClick={refreshCurrentPrice}\n          />\n        </div>\n        <div className='card-body'>\n          <form onSubmit={(e) => e.preventDefault()}>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='stockName'>\n                Stock Name:\n              </label>\n              <SymbolAutoSuggest onSuggestionSelected={onSymbolSelected} />\n            </div>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='currentPrice'>\n                Current Price:\n              </label>\n              <input\n                type='text'\n                id='currentPrice'\n                className='form-control'\n                value={currentPrice}\n                readOnly\n                placeholder='$0.00'\n              />\n            </div>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='targetPrice'>\n                Target Price:\n              </label>\n              <input\n                type='text'\n                id='targetPrice'\n                className='form-control'\n                value={targetPrice}\n                onChange={handleTargetPriceChange}\n                placeholder='$0.00'\n              />\n            </div>\n\n            <div className='button-group'>\n              <button\n                type='button'\n                className='btn btn-primary'\n                onClick={calculatePercentageChange}>\n                Calculate\n              </button>\n              <button\n                type='button'\n                className='btn btn-danger'\n                onClick={resetFields}>\n                Reset\n              </button>\n            </div>\n          </form>\n          <div className='result mt-3'>\n            <h6>\n              <strong>Percent Change:</strong> {percentageChange}%\n            </h6>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PercentageDifferenceCalculator;\n","// src/components/SymbolAutoSuggest/SymbolAutoSuggest.js\nimport React, { useState, useEffect } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSymbolAndFetchData } from '../../features/user/userThunks';\nimport { fetchSymbolSuggestions } from '../../features/stocks/stockThunks'; // Import the new thunk\nimport { clearSuggestions } from '../../features/stocks/stockSlice'; // Import the clearSuggestions action\n\nimport './SymbolAutoSuggest.scss';\n\nconst SymbolAutoSuggest = () => {\n  const dispatch = useDispatch();\n  const selectedSymbol = useSelector((state) => state.user.userSymbol); // Redux state for the selected symbol\n  const suggestions = useSelector((state) => state.stocks.suggestions || []); // Redux state for suggestions\n  const [query, setQuery] = useState(''); // Local state for the input value\n\n  // Sync the local query state with the Redux selectedSymbol on mount and whenever selectedSymbol changes\n  useEffect(() => {\n    // Check localStorage for a saved stock symbol and update Redux\n    const savedSymbol = localStorage.getItem('selectedStockSymbol');\n    if (savedSymbol && !selectedSymbol) {\n      dispatch(setSymbolAndFetchData(savedSymbol)); // Update Redux with the saved symbol\n    }\n\n    if (selectedSymbol) {\n      setQuery(selectedSymbol); // Update local input if Redux has the symbol\n    }\n  }, [selectedSymbol, dispatch]);\n\n  // Fetch suggestions based on the current input value\n  const onSuggestionsFetchRequested = ({ value }) => {\n    if (value.length < 1) {\n      dispatch(fetchSymbolSuggestions.fulfilled([])); // Clear suggestions in Redux\n      return;\n    }\n    // Dispatch the thunk to fetch suggestions from the API\n    dispatch(fetchSymbolSuggestions(value));\n  };\n\n  const onSuggestionsClearRequested = () => {\n    dispatch(clearSuggestions()); // Dispatch the clearSuggestions action\n  };\n\n  // Handle when a suggestion is selected from the dropdown\n  const onSuggestionSelected = (event, { suggestion }) => {\n    const selectedSymbol = suggestion.ticker;\n    setQuery(selectedSymbol); // Update the input field to show the selected symbol\n    dispatch(setSymbolAndFetchData(selectedSymbol)); // Dispatch to update Redux with the new symbol\n\n    // Save the selected symbol to localStorage for persistence\n    localStorage.setItem('selectedStockSymbol', selectedSymbol);\n    console.log('Selected symbol:', selectedSymbol);\n  };\n\n  const inputProps = {\n    placeholder: 'Search for a stock',\n    value: query, // Sync the input field with the local query state\n    onChange: (event, { newValue }) => {\n      setQuery(newValue); // Update the local input state only when typing\n    },\n  };\n\n  return (\n    <div className='symbol-auto-suggest'>\n      <Autosuggest\n        suggestions={suggestions} // Use suggestions from Redux state\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        getSuggestionValue={(suggestion) => suggestion.ticker}\n        renderSuggestion={(suggestion) => (\n          <div className='suggestion-item'>\n            <span className='suggestion-ticker'>{suggestion.ticker}</span>\n            <span className='suggestion-name'>{suggestion.name}</span>\n          </div>\n        )}\n        inputProps={inputProps}\n        onSuggestionSelected={onSuggestionSelected} // Dispatch to Redux and persist to localStorage on suggestion selection\n      />\n    </div>\n  );\n};\n\nexport default SymbolAutoSuggest;\n","// src/features/stocks/stockSelectors.js\nimport { createSelector } from 'reselect';\n\n// Base selector to get the entire stocks state\nexport const selectStockState = (state) => state.stocks;\n\n// Memoized selector to get all stocks data as a dictionary with tickers as keys\nexport const selectAllStockSnapshots = createSelector(\n  [selectStockState],\n  (stocks) => stocks.stockTickerData || {}\n);\n\n// Select symbols for the Trending Toolbar\nexport const selectTrendingToolbarSymbols = createSelector(\n  [selectStockState],\n  (stocks) => stocks.trendingToolbarSymbols || []\n);\n\n// Select symbols for the Index Toolbar\nexport const selectIndexToolbarSymbols = createSelector(\n  [selectStockState],\n  (stocks) => stocks.indexToolbarSymbols || []\n);\n\n// Selector to get detailed stock information\nexport const selectStockDetails = createSelector(\n  [selectStockState, (_, symbol) => symbol],\n  (stocks, symbol) => stocks.stockDetails[symbol] || {}\n);\n\n// Memoized selector to get the full response data of a specific stock ticker\nexport const selectStockSnapshot = createSelector(\n  [selectStockState, (_, ticker) => ticker],\n  (stocks, ticker) => stocks.stockTickerData[ticker] || {}\n);\n\n// Memoized selector to get the stock price using the stock snapshot selector\nexport const selectStockPrice = createSelector(\n  [selectStockSnapshot],\n  (stockSnapshot) => stockSnapshot?.prevDay?.c ?? 0\n);\n\n// Memoized selector to get the 'prevDay' closing price ('c') for a given symbol\nexport const selectPrevDayClosingPrice = createSelector(\n  [selectStockSnapshot],\n  (stockSnapshot) => stockSnapshot?.prevDay?.c ?? null\n);\n\n// Memoized selector to get a specific field of a stock's data\nexport const selectStockField = createSelector(\n  [selectStockSnapshot, (_, field) => field],\n  (stockSnapshot, field) => (stockSnapshot ? stockSnapshot[field] : null)\n);\n\n// Selector to get any error in the stocks slice\nexport const selectStockError = createSelector(\n  [selectStockState],\n  (stocks) => stocks.error\n);\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { setUserSymbol } from './userSlice';\nimport { fetchStockSnapshot } from '../stocks/stockThunks';\nimport { fetchNews } from '../news/newsThunks';\nimport { fetchWatchlistData } from '../watchlist/watchlistThunks';\n\nexport const setSymbolAndFetchData = createAsyncThunk(\n  'user/setSymbolAndFetchData',\n  async (symbol, { dispatch }) => {\n    dispatch(setUserSymbol(symbol));\n    await dispatch(fetchStockSnapshot(symbol));\n    await dispatch(fetchNews(symbol));\n    await dispatch(fetchWatchlistData([symbol]));\n  }\n);\n","// format.js\n\n// Function to format a numeric value as a currency string\nexport const formatCurrency = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and remove any non-numeric characters except for periods\n  value = value.toString().replace(/[^0-9.]/g, '');\n\n  // Split the value into integer and decimal parts\n  const parts = value.split('.');\n\n  // Add commas to the integer part of the number for better readability\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  // Join the integer and decimal parts back together and prepend a dollar sign\n  return `$${parts.join('.')}`;\n};\n\n// Function to parse a currency string back into a numeric value\nexport const parseCurrency = (value) => {\n  // Return 0 if the value is null or undefined\n  if (!value) return 0;\n\n  // Remove any non-numeric characters except for periods and convert the result to a float\n  return parseFloat(value.replace(/[^0-9.]/g, '')) || 0;\n};\n\n// Function to format a numeric value with commas as thousand separators\nexport const formatNumberWithCommas = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and add commas as thousand separators\n  return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n\n// Function to format a date to 'YYYY-MM-DD'\nexport const formatDateTime = (date) => {\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = `0${d.getMonth() + 1}`.slice(-2);\n  const day = `0${d.getDate()}`.slice(-2);\n  const hours = `0${d.getHours()}`.slice(-2);\n  const minutes = `0${d.getMinutes()}`.slice(-2);\n  const seconds = `0${d.getSeconds()}`.slice(-2);\n  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;\n};\n"],"names":["PercentageDifferenceCalculator","dispatch","useDispatch","userSymbol","useSelector","state","user","stockPrice","selectStockPrice","targetPrice","setTargetPrice","useState","currentPrice","setCurrentPrice","percentageChange","setPercentageChange","isRotating","setIsRotating","useEffect","fetchStockSnapshot","formattedPrice","formatCurrency","toFixed","calculatePercentageChange","change","parseCurrency","isNaN","resetFields","_jsx","className","children","_jsxs","FontAwesomeIcon","icon","faArrowsRotate","onClick","refreshCurrentPrice","unwrap","then","result","_result$prevDay","prevDay","c","price","console","warn","catch","error","finally","setTimeout","onSubmit","e","preventDefault","htmlFor","SymbolAutoSuggest","onSuggestionSelected","selectedSymbol","setUserSymbol","type","id","value","readOnly","placeholder","onChange","event","target","replace","suggestions","stocks","query","setQuery","savedSymbol","localStorage","getItem","setSymbolAndFetchData","inputProps","_ref3","newValue","Autosuggest","onSuggestionsFetchRequested","_ref","length","fetchSymbolSuggestions","fulfilled","onSuggestionsClearRequested","clearSuggestions","getSuggestionValue","suggestion","ticker","renderSuggestion","name","_ref2","setItem","log","selectStockState","selectAllStockSnapshots","createSelector","stockTickerData","selectTrendingToolbarSymbols","trendingToolbarSymbols","selectIndexToolbarSymbols","indexToolbarSymbols","selectStockDetails","_","symbol","stockDetails","selectStockSnapshot","stockSnapshot","_stockSnapshot$prevDa","_stockSnapshot$prevDa2","selectStockError","_stockSnapshot$prevDa3","_stockSnapshot$prevDa4","field","createAsyncThunk","async","fetchNews","fetchWatchlistData","parts","toString","split","join","parseFloat","formatNumberWithCommas"],"sourceRoot":""}