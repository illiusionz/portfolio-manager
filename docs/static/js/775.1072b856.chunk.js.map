{"version":3,"file":"static/js/775.1072b856.chunk.js","mappings":"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","sources":["features/stocks/stockSelectors.js","components/Portfolio/Portfolio.js","components/StockDetails/StockDetails.js","pages/PortfolioPage/PortfolioPage.js","utils/format.js"],"sourcesContent":["// src/features/stocks/stockSelectors.js\nimport { createSelector } from 'reselect';\n\n// Base selector to get the entire stocks state\nexport const selectStockState = (state) => state.stocks;\n\n// Memoized selector to get all stocks data as a dictionary with tickers as keys\nexport const selectAllStockSnapshots = createSelector(\n  [selectStockState],\n  (stocks) => stocks.stockTickerData || {}\n);\n\n// Select symbols for the Trending Toolbar\nexport const selectTrendingToolbarSymbols = createSelector(\n  [selectStockState],\n  (stocks) => stocks.trendingToolbarSymbols || []\n);\n\n// Select symbols for the Index Toolbar\nexport const selectIndexToolbarSymbols = createSelector(\n  [selectStockState],\n  (stocks) => stocks.indexToolbarSymbols || []\n);\n\n// Selector to get detailed stock information\nexport const selectStockDetails = createSelector(\n  [selectStockState, (_, symbol) => symbol],\n  (stocks, symbol) => stocks.stockDetails[symbol] || {}\n);\n\n// Memoized selector to get the full response data of a specific stock ticker\nexport const selectStockSnapshot = createSelector(\n  [selectStockState, (_, ticker) => ticker],\n  (stocks, ticker) => stocks.stockTickerData[ticker] || {}\n);\n\n// Memoized selector to get the stock price using the stock snapshot selector\nexport const selectStockPrice = createSelector(\n  [selectStockSnapshot],\n  (stockSnapshot) => stockSnapshot?.prevDay?.c ?? 0\n);\n\n// Memoized selector to get the 'prevDay' closing price ('c') for a given symbol\nexport const selectPrevDayClosingPrice = createSelector(\n  [selectStockSnapshot],\n  (stockSnapshot) => stockSnapshot?.prevDay?.c ?? null\n);\n\n// Memoized selector to get a specific field of a stock's data\nexport const selectStockField = createSelector(\n  [selectStockSnapshot, (_, field) => field],\n  (stockSnapshot, field) => (stockSnapshot ? stockSnapshot[field] : null)\n);\n\n// Selector to get any error in the stocks slice\nexport const selectStockError = createSelector(\n  [selectStockState],\n  (stocks) => stocks.error\n);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPortfolio } from '../../features/portfolio/portfolioSlice';\nimport { fetchStockDetails } from '../../features/stocks/stockThunks'; // Import stock details thunk\n\nconst Portfolio = ({ userId }) => {\n  const dispatch = useDispatch();\n  const portfolio = useSelector((state) => state.portfolio.portfolio);\n  const status = useSelector((state) => state.portfolio.status);\n  const error = useSelector((state) => state.portfolio.error);\n\n  // New selector for fetching stock details\n  const stockDetails = useSelector((state) => state.stocks.stockDetails);\n\n  useEffect(() => {\n    if (status === 'idle') {\n      dispatch(fetchPortfolio(userId));\n    }\n  }, [status, dispatch, userId]);\n\n  // Fetch stock details when portfolio is available\n  useEffect(() => {\n    if (portfolio?.stocks) {\n      portfolio.stocks.forEach((stock) => {\n        dispatch(fetchStockDetails(stock.symbol));\n      });\n    }\n  }, [dispatch, portfolio]);\n\n  if (status === 'loading') {\n    return <div>Loading...</div>;\n  }\n\n  if (status === 'failed') {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!portfolio || !portfolio.stocks) {\n    return <div>No portfolio data available</div>;\n  }\n\n  return (\n    <div className='container mt-4'>\n      <table className='table table-striped table-hover'>\n        <thead className='thead-dark'>\n          <tr>\n            <th scope='col'>Holding</th>\n            <th scope='col'>Shares</th>\n            <th scope='col'>Cost per share</th>\n            <th scope='col'>Cost basis</th>\n            <th scope='col'>Current value</th>\n            <th scope='col'>Dividends</th>\n            <th scope='col'>Dividend yield</th>\n            <th scope='col'>Total profit</th>\n            <th scope='col'>Daily</th>\n          </tr>\n        </thead>\n        <tbody>\n          {portfolio.stocks.map((stock, index) => {\n            const details = stockDetails[stock.symbol]; // Access the details from state\n            return (\n              <tr key={index}>\n                <td>{stock.symbol}</td>\n                <td>{stock.shares}</td>\n                <td>${stock.buyPrice}</td>\n                <td>${(stock.shares * stock.buyPrice).toFixed(2)}</td>\n                <td>${(stock.shares * stock.currentPrice).toFixed(2)}</td>\n                <td>$0.00</td>\n                <td>0%</td>\n                <td\n                  className={\n                    stock.currentPrice > stock.buyPrice\n                      ? 'text-success'\n                      : 'text-danger'\n                  }>\n                  $\n                  {(\n                    stock.shares *\n                    (stock.currentPrice - stock.buyPrice)\n                  ).toFixed(2)}\n                </td>\n                <td\n                  className={\n                    stock.currentPrice > stock.buyPrice\n                      ? 'text-success'\n                      : 'text-danger'\n                  }>\n                  ${(stock.currentPrice - stock.buyPrice).toFixed(2)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <p className='mt-4 fw-bold'>Total Value: ${portfolio.totalValue}</p>\n    </div>\n  );\n};\n\nexport default Portfolio;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchStockDetails } from '../../features/stocks/stockThunks';\nimport { selectStockDetails } from '../../features/stocks/stockSelectors';\nimport './StockDetails.scss';\nimport { formatCurrency } from '../../utils/format';\n\nconst StockDetails = ({ symbol }) => {\n  const dispatch = useDispatch();\n  const stockDetails = useSelector((state) =>\n    selectStockDetails(state, symbol)\n  );\n  const loading = useSelector((state) => state.stocks.loading);\n  const error = useSelector((state) => state.stocks.error);\n\n  useEffect(() => {\n    dispatch(fetchStockDetails(symbol));\n  }, [dispatch, symbol]);\n\n  if (loading) return <div className='stock-details'>Loading...</div>;\n  if (error)\n    return <div className='stock-details'>Error fetching stock details</div>;\n  if (!stockDetails)\n    return <div className='stock-details'>No stock details available</div>;\n\n  const {\n    name,\n    description,\n    branding: { icon_url, logo_url } = {},\n    market_cap,\n    phone_number,\n    total_employees,\n    locale,\n    primary_exchange,\n    ticker,\n    sic_description,\n    address1,\n    city,\n    postal_code,\n    state,\n  } = stockDetails;\n\n  return (\n    <div className='stock-details-card'>\n      <div className='stock-header'>\n        <img\n          src={`https://assets.parqet.com/logos/symbol/${symbol}`}\n          alt={`${name} logo`}\n          className='stock-logo'\n        />\n        <h2>{name}</h2>\n      </div>\n      <div className='stock-body'>\n        <div className='stock-info'>\n          <p>\n            <strong>Description:</strong> {description}\n          </p>\n          <p>\n            <strong>Market Cap:</strong> {formatCurrency(market_cap)}\n          </p>\n          <p>\n            <strong>Phone:</strong> {phone_number}\n          </p>\n          <p>\n            <strong>Employees:</strong> {total_employees}\n          </p>\n          <p>\n            <strong>Locale:</strong> {locale}\n          </p>\n          <p>\n            <strong>Primary Exchange:</strong> {primary_exchange}\n          </p>\n          <p>\n            <strong>Ticker:</strong> {ticker}\n          </p>\n          <p>\n            <strong>SIC Description:</strong> {sic_description}\n          </p>\n        </div>\n        <div className='stock-address'>\n          <h4>Address</h4>\n          <p>{address1}</p>\n          <p>\n            {city}, {state} {postal_code}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StockDetails;\n","// src/pages/PortfolioPage.js\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPortfolio } from '../../features/portfolio/portfolioSlice';\nimport Portfolio from '../../components/Portfolio/Portfolio';\nimport StockDetails from '../../components/StockDetails/StockDetails';\n\nconst PortfolioPage = () => {\n  const dispatch = useDispatch();\n  const testUserId = 'testUserId123'; // Replace with your test user ID\n  const portfolio = useSelector((state) => state.portfolio.portfolio);\n  const status = useSelector((state) => state.portfolio.status);\n  const error = useSelector((state) => state.portfolio.error);\n\n  useEffect(() => {\n    if (status === 'idle') {\n      dispatch(fetchPortfolio(testUserId));\n    }\n  }, [status, dispatch, testUserId]);\n\n  if (status === 'loading') {\n    return <div>Loading...</div>;\n  }\n\n  if (status === 'failed') {\n    return <div>Error: {error}</div>;\n  }\n\n  // Ensure portfolio is not undefined or null before rendering\n  if (!portfolio || !portfolio.stocks) {\n    return <div>No portfolio data available</div>;\n  }\n\n  return (\n    <div className='container mt-4'>\n      <h2 className='mb-4'>Stock Portfolio</h2>\n      <Portfolio portfolio={portfolio} />\n      <div className='mt-4'>\n        <h3>Stock Details</h3>\n        <StockDetails symbol={portfolio.stocks[0].symbol} />{' '}\n        {/* Example usage */}\n      </div>\n      <p>Built with Express.js, MongoDB, GraphQL, Apollo Server</p>\n    </div>\n  );\n};\n\nexport default PortfolioPage;\n","// format.js\n\n// Function to format a numeric value as a currency string\nexport const formatCurrency = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and remove any non-numeric characters except for periods\n  value = value.toString().replace(/[^0-9.]/g, '');\n\n  // Split the value into integer and decimal parts\n  const parts = value.split('.');\n\n  // Add commas to the integer part of the number for better readability\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  // Join the integer and decimal parts back together and prepend a dollar sign\n  return `$${parts.join('.')}`;\n};\n\n// Function to parse a currency string back into a numeric value\nexport const parseCurrency = (value) => {\n  // Return 0 if the value is null or undefined\n  if (!value) return 0;\n\n  // Remove any non-numeric characters except for periods and convert the result to a float\n  return parseFloat(value.replace(/[^0-9.]/g, '')) || 0;\n};\n\n// Function to format a numeric value with commas as thousand separators\nexport const formatNumberWithCommas = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and add commas as thousand separators\n  return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n\n// Function to format a date to 'YYYY-MM-DD'\nexport const formatDateTime = (date) => {\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = `0${d.getMonth() + 1}`.slice(-2);\n  const day = `0${d.getDate()}`.slice(-2);\n  const hours = `0${d.getHours()}`.slice(-2);\n  const minutes = `0${d.getMinutes()}`.slice(-2);\n  const seconds = `0${d.getSeconds()}`.slice(-2);\n  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;\n};\n"],"names":["selectStockState","state","stocks","selectAllStockSnapshots","createSelector","stockTickerData","selectTrendingToolbarSymbols","trendingToolbarSymbols","selectIndexToolbarSymbols","indexToolbarSymbols","selectStockDetails","_","symbol","stockDetails","selectStockSnapshot","ticker","selectStockPrice","stockSnapshot","_stockSnapshot$prevDa","_stockSnapshot$prevDa2","prevDay","c","selectStockError","_stockSnapshot$prevDa3","_stockSnapshot$prevDa4","field","error","_ref","userId","dispatch","useDispatch","portfolio","useSelector","status","useEffect","fetchPortfolio","forEach","stock","fetchStockDetails","_jsx","children","_jsxs","className","scope","map","index","shares","buyPrice","toFixed","currentPrice","totalValue","loading","name","description","branding","icon_url","logo_url","market_cap","phone_number","total_employees","locale","primary_exchange","sic_description","address1","city","postal_code","src","alt","formatCurrency","PortfolioPage","testUserId","Portfolio","StockDetails","value","parts","toString","replace","split","join","parseCurrency","parseFloat","formatNumberWithCommas"],"sourceRoot":""}