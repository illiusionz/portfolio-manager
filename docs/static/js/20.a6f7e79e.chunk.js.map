{"version":3,"file":"static/js/20.a6f7e79e.chunk.js","mappings":"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","sources":["components/shared/SymbolAutoSuggest.js","features/user/userSelectors.js","features/user/userThunks.js","layout/NavBar/NavBar.js"],"sourcesContent":["// src/components/SymbolAutoSuggest/SymbolAutoSuggest.js\nimport './SymbolAutoSuggest.scss';\nimport React, { useState, useEffect } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSymbolAndFetchData } from '../../features/user/userThunks';\nimport { fetchSymbolSuggestions } from '../../features/stocks/stockThunks';\nimport { clearSuggestions } from '../../features/stocks/stockSlice';\nimport { selectUserSymbol } from '../../features/user/userSelectors';\n\nconst SymbolAutoSuggest = () => {\n  const dispatch = useDispatch();\n  const selectedSymbol = useSelector(selectUserSymbol);\n  const suggestions = useSelector((state) => state.stocks.suggestions || []);\n  const [query, setQuery] = useState(''); // Local state for the input value\n\n  // Sync the local query state with the Redux selectedSymbol on mount and whenever selectedSymbol changes\n  useEffect(() => {\n    // Check localStorage for a saved stock symbol and update Redux\n    const savedSymbol = localStorage.getItem('selectedStockSymbol');\n    if (savedSymbol && !selectedSymbol) {\n      dispatch(setSymbolAndFetchData(savedSymbol)); // Update Redux with the saved symbol\n    }\n\n    if (selectedSymbol) {\n      setQuery(selectedSymbol); // Update local input if Redux has the symbol\n    }\n  }, [selectedSymbol, dispatch]);\n\n  // Fetch suggestions based on the current input value\n  const onSuggestionsFetchRequested = ({ value }) => {\n    if (value.length < 1) {\n      dispatch(fetchSymbolSuggestions.fulfilled([])); // Clear suggestions in Redux\n      return;\n    }\n    // Dispatch the thunk to fetch suggestions from the API\n    dispatch(fetchSymbolSuggestions(value));\n  };\n\n  const onSuggestionsClearRequested = () => {\n    dispatch(clearSuggestions()); // Dispatch the clearSuggestions action\n  };\n\n  // Handle when a suggestion is selected from the dropdown\n  const onSuggestionSelected = (event, { suggestion }) => {\n    const selectedSymbol = suggestion.ticker;\n    setQuery(selectedSymbol); // Update the input field to show the selected symbol\n    dispatch(setSymbolAndFetchData(selectedSymbol)); // Dispatch to update Redux with the new symbol\n    // Save the selected symbol to localStorage for persistence\n    localStorage.setItem('selectedStockSymbol', selectedSymbol);\n    console.log('Selected symbol:', selectedSymbol);\n  };\n\n  const inputProps = {\n    placeholder: 'Search for a stock',\n    value: query, // Sync the input field with the local query state\n    onChange: (event, { newValue }) => {\n      setQuery(newValue); // Update the local input state only when typing\n    },\n  };\n\n  return (\n    <div className='symbol-auto-suggest'>\n      <Autosuggest\n        suggestions={suggestions} // Use suggestions from Redux state\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        getSuggestionValue={(suggestion) => suggestion.ticker}\n        renderSuggestion={(suggestion) => (\n          <div className='suggestion-item'>\n            <span className='suggestion-ticker'>{suggestion.ticker}</span>\n            <span className='suggestion-name'>{suggestion.name}</span>\n          </div>\n        )}\n        inputProps={inputProps}\n        onSuggestionSelected={onSuggestionSelected} // Dispatch to Redux and persist to localStorage on suggestion selection\n      />\n    </div>\n  );\n};\n\nexport default SymbolAutoSuggest;\n","export const selectUserSymbol = (state) => state.user.userSymbol;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { setUserSymbol } from './userSlice';\nimport { fetchStockSnapshot } from '../stocks/stockThunks';\nimport { fetchNews } from '../news/newsThunks';\nimport { fetchWatchlistData } from '../watchlist/watchlistThunks';\n\nexport const setSymbolAndFetchData = createAsyncThunk(\n  'user/setSymbolAndFetchData',\n  async (symbol, { dispatch }) => {\n    dispatch(setUserSymbol(symbol));\n    await dispatch(fetchStockSnapshot(symbol));\n    await dispatch(fetchNews(symbol));\n    await dispatch(fetchWatchlistData([symbol]));\n  }\n);\n","import './NavBar.scss';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faBars,\n  faSun,\n  faMoon,\n  faSearch,\n} from '@fortawesome/free-solid-svg-icons';\nimport profileImage from '../../assets/images/user-image.jpg';\nimport { setTheme } from '../../features/theme/themeSlice';\nimport { addToWatchlist } from '../../features/watchlist/watchlistSlice';\nimport { selectTheme } from '../../features/theme/themeSelectors';\nimport { selectUserSymbol } from '../../features/user/userSelectors';\nimport { setSymbolAndFetchData } from '../../features/user/userThunks';\nimport SymbolAutoSuggest from '../../components/shared/SymbolAutoSuggest';\n\nconst Navbar = ({ toggleSidebar, handleSymbolSearch }) => {\n  const dispatch = useDispatch();\n  const userSymbol = useSelector(selectUserSymbol);\n  const theme = useSelector(selectTheme);\n  const watchlist = useSelector((state) => state.watchlist.symbols);\n\n  // Fetch saved theme from local storage\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      dispatch(setTheme(savedTheme));\n    }\n  }, [dispatch]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (userSymbol) {\n      dispatch(setSymbolAndFetchData(userSymbol)); // Unified action to fetch and sync symbol\n    }\n  };\n\n  const onAddToWatchlist = () => {\n    if (userSymbol && !watchlist.includes(userSymbol)) {\n      dispatch(addToWatchlist(userSymbol));\n    }\n  };\n\n  useEffect(() => {\n    document.body.className =\n      theme === 'theme-dark' ? 'theme-dark' : 'theme-light';\n  }, [theme]);\n\n  const handleToggleTheme = () => {\n    const newTheme = theme === 'theme-light' ? 'theme-dark' : 'theme-light';\n    dispatch(setTheme(newTheme)); // Toggle theme and persist in local storage\n    localStorage.setItem('theme', newTheme);\n  };\n\n  return (\n    <nav className='navbar navbar-expand-lg'>\n      <button className='btn btn-primary' onClick={toggleSidebar}>\n        <FontAwesomeIcon icon={faBars} />\n      </button>\n      <form className='form-inline my-2 my-lg-0' onSubmit={onSubmit}>\n        <div className='input-group'>\n          <SymbolAutoSuggest /> {/* Symbol synced via Redux */}\n        </div>\n        <button className='btn btn-primary ms-1 my-2 my-sm-0' type='submit'>\n          <FontAwesomeIcon icon={faSearch} />\n        </button>\n        <button\n          className='btn btn-primary ms-1  my-2 my-sm-0'\n          type='button'\n          onClick={onAddToWatchlist}>\n          Add to Watch List\n        </button>\n      </form>\n      <button\n        className='btn btn-light ms-auto my-2 my-sm-0 theme-toggle'\n        type='button'\n        onClick={handleToggleTheme}>\n        <FontAwesomeIcon icon={theme === 'dark' ? faSun : faMoon} />\n      </button>\n      <ul className='navbar-nav navbar-align'>\n        <li className='nav-item dropdown'>\n          <div className='nav-link dropdown-toggle'>\n            <img src={profileImage} alt='User' className='user-image' />\n            <span className='user-name'>Jeff Liu</span>\n          </div>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n"],"names":["SymbolAutoSuggest","dispatch","useDispatch","selectedSymbol","useSelector","selectUserSymbol","suggestions","state","stocks","query","setQuery","useState","useEffect","savedSymbol","localStorage","getItem","setSymbolAndFetchData","inputProps","placeholder","value","onChange","event","_ref3","newValue","_jsx","className","children","Autosuggest","onSuggestionsFetchRequested","_ref","length","fetchSymbolSuggestions","fulfilled","onSuggestionsClearRequested","clearSuggestions","getSuggestionValue","suggestion","ticker","renderSuggestion","_jsxs","name","onSuggestionSelected","_ref2","setItem","console","log","user","userSymbol","createAsyncThunk","async","symbol","setUserSymbol","fetchStockSnapshot","fetchNews","fetchWatchlistData","toggleSidebar","handleSymbolSearch","theme","selectTheme","watchlist","symbols","savedTheme","setTheme","document","body","onClick","FontAwesomeIcon","icon","faBars","onSubmit","e","preventDefault","type","faSearch","onAddToWatchlist","includes","addToWatchlist","handleToggleTheme","newTheme","faSun","faMoon","src","alt"],"sourceRoot":""}