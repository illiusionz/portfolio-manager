{"version":3,"file":"static/js/865.ab7e225c.chunk.js","mappings":"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","sources":["components/OptionPremiumCalculator/OptionPremiumCalculator.js","components/shared/SymbolAutoSuggest.js","utils/format.js"],"sourcesContent":["// src/components/OptionPremiumCalculator.js\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './OptionPremiumCalculator.scss';\nimport { fetchStockSnapshot } from '../../features/stocks/stockThunks'; // Redux thunk for fetching stock data\nimport { selectStockPrice } from '../../features/stocks/stockSelectors'; // Selector for stock price\nimport { setUserSymbol } from '../../features/user/userSlice'; // Action for setting user symbol\nimport {\n  formatNumberWithCommas,\n  formatCurrency,\n  parseCurrency,\n} from '../../utils/format';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowsRotate } from '@fortawesome/free-solid-svg-icons';\nimport SymbolAutoSuggest from '../shared/SymbolAutoSuggest'; // Shared component for symbol suggestion\n\nconst OptionPremiumCalculator = () => {\n  const dispatch = useDispatch();\n\n  // State selectors\n  const userSymbol = useSelector((state) => state.user.userSymbol); // Selected symbol\n  const currentPrice = useSelector((state) =>\n    selectStockPrice(state, userSymbol)\n  ); // Fetch stock price\n\n  // Local state management\n  const [strikePrice, setStrikePrice] = useState('');\n  const [premiumAmount, setPremiumAmount] = useState('');\n  const [numberOfContracts, setNumberOfContracts] = useState(1);\n  const [amountOfWeeks, setAmountOfWeeks] = useState(1);\n  const [totalPremium, setTotalPremium] = useState(0);\n  const [totalCapital, setTotalCapital] = useState(0);\n  const [percentageReturn, setPercentageReturn] = useState(0);\n  const [isRotating, setIsRotating] = useState(false);\n\n  // Fetch stock data when the symbol changes\n  useEffect(() => {\n    if (userSymbol) {\n      dispatch(fetchStockSnapshot(userSymbol));\n    }\n  }, [userSymbol, dispatch]);\n\n  // Set the initial strike price based on current stock price\n  useEffect(() => {\n    if (currentPrice) {\n      setStrikePrice(formatCurrency(currentPrice.toFixed(2)));\n    }\n  }, [currentPrice]);\n\n  // Recalculate total premium and return when input values change\n  useEffect(() => {\n    calculateTotalPremium();\n  }, [strikePrice, premiumAmount, numberOfContracts, amountOfWeeks]);\n\n  // Helper function to calculate the total premium and return\n  const calculateTotalPremium = () => {\n    const strike = parseCurrency(strikePrice);\n    const premium = parseCurrency(premiumAmount) * 100;\n    const total = numberOfContracts * premium * amountOfWeeks;\n    setTotalPremium(isNaN(total) ? 0 : total);\n    const capitalUsed = numberOfContracts * strike * 100;\n    setTotalCapital(isNaN(capitalUsed) ? 0 : capitalUsed);\n    const percentage = (total / capitalUsed) * 100;\n    setPercentageReturn(isNaN(percentage) ? 0 : percentage);\n  };\n\n  // Handle resetting of fields\n  const resetFields = () => {\n    setPremiumAmount('');\n    setNumberOfContracts(1);\n    setAmountOfWeeks(1);\n    setTotalPremium(0);\n    setTotalCapital(0);\n    setPercentageReturn(0);\n    setStrikePrice(currentPrice ? formatCurrency(currentPrice) : '$0.00');\n  };\n\n  // Handle selection of a new symbol\n  const onSymbolSelected = (selectedSymbol) => {\n    dispatch(setUserSymbol(selectedSymbol));\n    resetFields();\n  };\n\n  // Handle changes in strike price input\n  const handleStrikePriceChange = (event) => {\n    const value = event.target.value.replace(/[^0-9.]/g, '');\n    setStrikePrice(formatCurrency(value));\n  };\n\n  // Handle changes in premium amount input\n  const handlePremiumAmountChange = (event) => {\n    const value = event.target.value.replace(/[^0-9.]/g, '');\n    setPremiumAmount(formatCurrency(value));\n  };\n\n  // Handle changes in number of contracts input\n  const handleNumberOfContractsChange = (event) => {\n    setNumberOfContracts(Number(event.target.value));\n  };\n\n  // Handle changes in amount of weeks input\n  const handleAmountOfWeeksChange = (event) => {\n    setAmountOfWeeks(Number(event.target.value));\n  };\n\n  // Handle refreshing the current price\n  const refreshCurrentPrice = () => {\n    if (!userSymbol) {\n      console.warn('No symbol selected for refresh');\n      return;\n    }\n\n    dispatch(fetchStockSnapshot(userSymbol))\n      .unwrap()\n      .then((result) => {\n        if (result?.prevDay?.c) {\n          const price = result.prevDay.c;\n          setStrikePrice(formatCurrency(price.toFixed(2))); // Correctly set the price\n        } else {\n          console.warn('Stock snapshot did not contain expected data.', result);\n          setStrikePrice(\n            currentPrice ? formatCurrency(currentPrice.toFixed(2)) : '$0.00'\n          );\n        }\n      })\n      .catch((error) => {\n        console.error('Error refreshing stock price:', error);\n        setStrikePrice(\n          currentPrice ? formatCurrency(currentPrice.toFixed(2)) : '$0.00'\n        );\n      })\n      .finally(() => {\n        setIsRotating(true);\n        setTimeout(() => setIsRotating(false), 500);\n      });\n  };\n\n  return (\n    <div className='option-premium-calculator'>\n      <div className='card'>\n        <div className='card-header'>\n          <h5 className='card-title mb-0'>Option Premium Calculator</h5>\n          <FontAwesomeIcon\n            icon={faArrowsRotate}\n            className={`card-refresh ${isRotating ? 'rotating' : ''}`}\n            onClick={refreshCurrentPrice}\n          />\n        </div>\n        <div className='card-body'>\n          <form onSubmit={(e) => e.preventDefault()}>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='stockName'>\n                Stock Name:\n              </label>\n              <SymbolAutoSuggest onSuggestionSelected={onSymbolSelected} />\n            </div>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='strikePrice'>\n                Stock Strike Price:\n              </label>\n              <input\n                type='text'\n                id='strikePrice'\n                className='form-control'\n                value={strikePrice}\n                onChange={handleStrikePriceChange}\n                placeholder='$0.00'\n              />\n            </div>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='premiumAmount'>\n                Premium Amount:\n              </label>\n              <input\n                type='text'\n                id='premiumAmount'\n                className='form-control'\n                value={premiumAmount}\n                onChange={handlePremiumAmountChange}\n                placeholder='$0.00'\n              />\n            </div>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='numberOfContracts'>\n                Number of Contracts:\n              </label>\n              <input\n                type='number'\n                id='numberOfContracts'\n                className='form-control'\n                value={numberOfContracts}\n                onChange={handleNumberOfContractsChange}\n              />\n            </div>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='amountOfWeeks'>\n                Amount of Weeks:\n              </label>\n              <input\n                type='number'\n                id='amountOfWeeks'\n                className='form-control'\n                value={amountOfWeeks}\n                onChange={handleAmountOfWeeksChange}\n              />\n            </div>\n            <div className='button-group'>\n              <button\n                type='button'\n                className='btn btn-primary'\n                onClick={calculateTotalPremium}>\n                Calculate\n              </button>\n              <button\n                type='button'\n                className='btn btn-danger'\n                onClick={resetFields}>\n                Reset\n              </button>\n            </div>\n            <div className='result mt-3'>\n              <h6>\n                <strong>Total Premium Collected:</strong> +$\n                {formatNumberWithCommas(totalPremium.toFixed(2))}\n              </h6>\n              <h6>\n                <strong>Total Capital Used:</strong> $\n                {formatNumberWithCommas(totalCapital.toFixed(2))}\n              </h6>\n              <h6>\n                <strong>Average Return:</strong> +\n                {formatNumberWithCommas(percentageReturn.toFixed(2))}%\n              </h6>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OptionPremiumCalculator;\n","// src/components/SymbolAutoSuggest/SymbolAutoSuggest.js\nimport React, { useState, useEffect } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSymbolAndFetchData } from '../../features/user/userThunks';\nimport { fetchSymbolSuggestions } from '../../features/stocks/stockThunks'; // Import the new thunk\nimport { clearSuggestions } from '../../features/stocks/stockSlice'; // Import the clearSuggestions action\n\nimport './SymbolAutoSuggest.scss';\n\nconst SymbolAutoSuggest = () => {\n  const dispatch = useDispatch();\n  const selectedSymbol = useSelector((state) => state.user.userSymbol); // Redux state for the selected symbol\n  const suggestions = useSelector((state) => state.stocks.suggestions || []); // Redux state for suggestions\n  const [query, setQuery] = useState(''); // Local state for the input value\n\n  // Sync the local query state with the Redux selectedSymbol on mount and whenever selectedSymbol changes\n  useEffect(() => {\n    // Check localStorage for a saved stock symbol and update Redux\n    const savedSymbol = localStorage.getItem('selectedStockSymbol');\n    if (savedSymbol && !selectedSymbol) {\n      dispatch(setSymbolAndFetchData(savedSymbol)); // Update Redux with the saved symbol\n    }\n\n    if (selectedSymbol) {\n      setQuery(selectedSymbol); // Update local input if Redux has the symbol\n    }\n  }, [selectedSymbol, dispatch]);\n\n  // Fetch suggestions based on the current input value\n  const onSuggestionsFetchRequested = ({ value }) => {\n    if (value.length < 1) {\n      dispatch(fetchSymbolSuggestions.fulfilled([])); // Clear suggestions in Redux\n      return;\n    }\n    // Dispatch the thunk to fetch suggestions from the API\n    dispatch(fetchSymbolSuggestions(value));\n  };\n\n  const onSuggestionsClearRequested = () => {\n    dispatch(clearSuggestions()); // Dispatch the clearSuggestions action\n  };\n\n  // Handle when a suggestion is selected from the dropdown\n  const onSuggestionSelected = (event, { suggestion }) => {\n    const selectedSymbol = suggestion.ticker;\n    setQuery(selectedSymbol); // Update the input field to show the selected symbol\n    dispatch(setSymbolAndFetchData(selectedSymbol)); // Dispatch to update Redux with the new symbol\n\n    // Save the selected symbol to localStorage for persistence\n    localStorage.setItem('selectedStockSymbol', selectedSymbol);\n    console.log('Selected symbol:', selectedSymbol);\n  };\n\n  const inputProps = {\n    placeholder: 'Search for a stock',\n    value: query, // Sync the input field with the local query state\n    onChange: (event, { newValue }) => {\n      setQuery(newValue); // Update the local input state only when typing\n    },\n  };\n\n  return (\n    <div className='symbol-auto-suggest'>\n      <Autosuggest\n        suggestions={suggestions} // Use suggestions from Redux state\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        getSuggestionValue={(suggestion) => suggestion.ticker}\n        renderSuggestion={(suggestion) => (\n          <div className='suggestion-item'>\n            <span className='suggestion-ticker'>{suggestion.ticker}</span>\n            <span className='suggestion-name'>{suggestion.name}</span>\n          </div>\n        )}\n        inputProps={inputProps}\n        onSuggestionSelected={onSuggestionSelected} // Dispatch to Redux and persist to localStorage on suggestion selection\n      />\n    </div>\n  );\n};\n\nexport default SymbolAutoSuggest;\n","// format.js\n\n// Function to format a numeric value as a currency string\nexport const formatCurrency = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and remove any non-numeric characters except for periods\n  value = value.toString().replace(/[^0-9.]/g, '');\n\n  // Split the value into integer and decimal parts\n  const parts = value.split('.');\n\n  // Add commas to the integer part of the number for better readability\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  // Join the integer and decimal parts back together and prepend a dollar sign\n  return `$${parts.join('.')}`;\n};\n\n// Function to parse a currency string back into a numeric value\nexport const parseCurrency = (value) => {\n  // Return 0 if the value is null or undefined\n  if (!value) return 0;\n\n  // Remove any non-numeric characters except for periods and convert the result to a float\n  return parseFloat(value.replace(/[^0-9.]/g, '')) || 0;\n};\n\n// Function to format a numeric value with commas as thousand separators\nexport const formatNumberWithCommas = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and add commas as thousand separators\n  return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n\n// Function to format a date to 'YYYY-MM-DD'\nexport const formatDateTime = (date) => {\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = `0${d.getMonth() + 1}`.slice(-2);\n  const day = `0${d.getDate()}`.slice(-2);\n  const hours = `0${d.getHours()}`.slice(-2);\n  const minutes = `0${d.getMinutes()}`.slice(-2);\n  const seconds = `0${d.getSeconds()}`.slice(-2);\n  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;\n};\n"],"names":["OptionPremiumCalculator","dispatch","useDispatch","userSymbol","useSelector","state","user","currentPrice","selectStockPrice","strikePrice","setStrikePrice","useState","premiumAmount","setPremiumAmount","numberOfContracts","setNumberOfContracts","amountOfWeeks","setAmountOfWeeks","totalPremium","setTotalPremium","totalCapital","setTotalCapital","percentageReturn","setPercentageReturn","isRotating","setIsRotating","useEffect","fetchStockSnapshot","formatCurrency","toFixed","calculateTotalPremium","strike","parseCurrency","premium","total","isNaN","capitalUsed","percentage","resetFields","_jsx","className","children","_jsxs","FontAwesomeIcon","icon","faArrowsRotate","onClick","refreshCurrentPrice","unwrap","then","result","_result$prevDay","prevDay","c","price","console","warn","catch","error","finally","setTimeout","onSubmit","e","preventDefault","htmlFor","SymbolAutoSuggest","onSuggestionSelected","selectedSymbol","setUserSymbol","type","id","value","onChange","event","target","replace","placeholder","Number","formatNumberWithCommas","suggestions","stocks","query","setQuery","savedSymbol","localStorage","getItem","setSymbolAndFetchData","inputProps","_ref3","newValue","Autosuggest","onSuggestionsFetchRequested","_ref","length","fetchSymbolSuggestions","fulfilled","onSuggestionsClearRequested","clearSuggestions","getSuggestionValue","suggestion","ticker","renderSuggestion","name","_ref2","setItem","log","parts","toString","split","join","parseFloat"],"sourceRoot":""}