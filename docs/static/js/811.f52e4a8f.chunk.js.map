{"version":3,"file":"static/js/811.f52e4a8f.chunk.js","mappings":"kNAMA,MAiGA,EAjGsBA,KACpB,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,OAC5CG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IACpCK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,IAChCO,EAAOC,IAAYR,EAAAA,EAAAA,UAAS,OAEnCS,EAAAA,EAAAA,YAAU,KACUC,WAChB,IACE,MAAMC,OCVoBD,WAChC,IACE,MAAME,QAAiBC,EAAAA,EAAMC,IAC3B,+CACA,CACEC,OAAQ,CACNC,KAAM,UACNC,UAVSC,2BAWTC,WAVU,GAWVC,IAbMF,6CAmBZ,OADAG,QAAQC,IAAI,gBAAiBV,EAASW,MAC/BX,EAASW,KAAKC,KACvB,CAAE,MAAOjB,GAEP,MADAc,QAAQd,MAAM,iCAAkCA,GAC1CA,CACR,GDT8BkB,GACxB1B,EAAUY,EACZ,CAAE,MAAOJ,GACPC,EAAS,mDACTa,QAAQd,MAAM,yBAA0BA,EAC1C,CAAC,QACCD,GAAW,EACb,GAGFoB,EAAW,GACV,IAEH,MAKMC,EAAmBA,KACvBvB,GAAa,GACbF,EAAiB,KAAK,EAGxB,OACE0B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,6BAA4BC,SAAC,mBAC1CzB,GACC0B,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,UAAU,SAASC,QAAQ,YAClC3B,GACFwB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBAAoBC,SAAEvB,KAErCwB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,SAC9BhC,EAAOqC,KAAI,CAACC,EAAOC,KAClBT,EAAAA,EAAAA,MAAA,OAEEC,UAAU,aACVS,QAASA,IAvBIF,KACvBlC,EAAiBkC,GACjBhC,GAAa,EAAK,EAqBOmC,CAAgBH,GAAON,SAAA,EACtCC,EAAAA,EAAAA,KAAA,OACES,IAAKJ,EAAMK,QAAQC,WAAWC,KAAKC,IACnCC,IAAKT,EAAMK,QAAQK,MACnBjB,UAAU,qBAEZD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,SAAEM,EAAMK,QAAQK,SAC3Cf,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gBAAeC,SAAEM,EAAMK,QAAQM,gBAC5ChB,EAAAA,EAAAA,KAAA,KAAGF,UAAU,aAAYC,SACtB,IAAIkB,KAAKZ,EAAMK,QAAQQ,aAAaC,4BAZpCd,EAAMe,GAAGC,SAAWf,QAoBjCT,EAAAA,EAAAA,MAACyB,EAAAA,EAAK,CACJC,KAAMnD,EACNoD,OAAQ5B,EACR6B,UAAQ,EACRC,KAAK,KACLC,gBAAgB,eAAc5B,SAAA,EAC9BC,EAAAA,EAAAA,KAACsB,EAAAA,EAAMM,OAAM,CAAC9B,UAAU,eAAcC,UACpCC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAM,CACL1B,QAAQ,QACRI,QAASX,EACT,aAAW,QACXE,UAAU,0BAGdE,EAAAA,EAAAA,KAACsB,EAAAA,EAAMQ,KAAI,CAAChC,UAAU,MAAKC,SACxB7B,IACC8B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,KAAA,UACE+B,MAAM,OACNC,OAAO,MACPvB,IAAK,iCAAiCvC,EAAckD,GAAGC,qBACvDY,YAAY,IACZC,MAAM,2FACNC,iBAAe,EACfpB,MAAO7C,EAAcwC,QAAQK,iBAKnC,C","sources":["pages/EducationPage/EducationPage.js","api/youtubeApi.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchYouTubeVideos } from '../../api/youtubeApi';\nimport './EducationPage.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Modal, Button, Spinner } from 'react-bootstrap';\n\nconst EducationPage = () => {\n  const [videos, setVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getVideos = async () => {\n      try {\n        const videoList = await fetchYouTubeVideos();\n        setVideos(videoList);\n      } catch (error) {\n        setError('Failed to fetch videos. Please try again later.');\n        console.error('Error fetching videos:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getVideos();\n  }, []);\n\n  const handleShowModal = (video) => {\n    setSelectedVideo(video);\n    setShowModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setSelectedVideo(null);\n  };\n\n  return (\n    <div className='education-container'>\n      <h1 className='education-title page-title'>Education Page</h1>\n      {loading ? (\n        <Spinner animation='border' variant='primary' />\n      ) : error ? (\n        <div className='alert alert-danger'>{error}</div>\n      ) : (\n        <div className='videos-container'>\n          {videos.map((video, index) => (\n            <div\n              key={video.id.videoId || index}\n              className='video-card'\n              onClick={() => handleShowModal(video)}>\n              <img\n                src={video.snippet.thumbnails.high.url}\n                alt={video.snippet.title}\n                className='video-thumbnail'\n              />\n              <div className='video-info'>\n                <h3 className='video-title'>{video.snippet.title}</h3>\n                <p className='video-channel'>{video.snippet.channelTitle}</p>\n                <p className='video-date'>\n                  {new Date(video.snippet.publishedAt).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      <Modal\n        show={showModal}\n        onHide={handleCloseModal}\n        centered\n        size='xl'\n        dialogClassName='custom-modal'>\n        <Modal.Header className='border-0 p-0'>\n          <Button\n            variant='close'\n            onClick={handleCloseModal}\n            aria-label='Close'\n            className='modal-close-button'\n          />\n        </Modal.Header>\n        <Modal.Body className='p-0'>\n          {selectedVideo && (\n            <div className='video-wrapper'>\n              <iframe\n                width='100%'\n                height='500'\n                src={`https://www.youtube.com/embed/${selectedVideo.id.videoId}?autoplay=1`}\n                frameBorder='0'\n                allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture'\n                allowFullScreen\n                title={selectedVideo.snippet.title}></iframe>\n            </div>\n          )}\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n};\n\nexport default EducationPage;\n","import axios from 'axios';\n\nconst API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\nconst CHANNEL_ID = process.env.REACT_APP_YOUTUBE_CHANNEL_ID;\nconst MAX_RESULTS = 10;\n\nexport const fetchYouTubeVideos = async () => {\n  try {\n    const response = await axios.get(\n      'https://www.googleapis.com/youtube/v3/search',\n      {\n        params: {\n          part: 'snippet',\n          channelId: CHANNEL_ID,\n          maxResults: MAX_RESULTS,\n          key: API_KEY,\n        },\n      }\n    );\n\n    console.log('API Response:', response.data);\n    return response.data.items;\n  } catch (error) {\n    console.error('Error fetching YouTube videos:', error);\n    throw error;\n  }\n};\n"],"names":["EducationPage","videos","setVideos","useState","selectedVideo","setSelectedVideo","showModal","setShowModal","loading","setLoading","error","setError","useEffect","async","videoList","response","axios","get","params","part","channelId","process","maxResults","key","console","log","data","items","fetchYouTubeVideos","getVideos","handleCloseModal","_jsxs","className","children","_jsx","Spinner","animation","variant","map","video","index","onClick","handleShowModal","src","snippet","thumbnails","high","url","alt","title","channelTitle","Date","publishedAt","toLocaleDateString","id","videoId","Modal","show","onHide","centered","size","dialogClassName","Header","Button","Body","width","height","frameBorder","allow","allowFullScreen"],"sourceRoot":""}