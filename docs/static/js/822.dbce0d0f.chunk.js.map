{"version":3,"file":"static/js/822.dbce0d0f.chunk.js","mappings":"kLAIA,MA8HA,EA9HmCA,KACjC,MAAOC,EAAgBC,IAAqBC,EAAAA,EAAAA,UAAS,UAC9CC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,MACtCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,OAC5BK,EAASC,IAAcN,EAAAA,EAAAA,UAAS,IACjCO,GAAQC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMF,QAkC3C,OACEG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UAC1BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,kBAAiBC,SAAC,oCAElCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,aAAaG,QAAQ,iBAAgBF,SAAC,sBAGvDC,EAAAA,EAAAA,KAAA,SACEE,KAAK,OACLC,GAAG,iBACHL,UAAU,eACVM,MAAOnB,EACPoB,SAAWC,GACTpB,GACEqB,EAAAA,EAAAA,IAAuBD,EAAEE,OAAOJ,MAAMK,QAAQ,KAAM,YAK5DZ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,aAAaG,QAAQ,aAAYF,SAAC,sBAGnDC,EAAAA,EAAAA,KAAA,SACEE,KAAK,OACLC,GAAG,aACHL,UAAU,eACVM,MAAOhB,EACPiB,SAAWC,GAAMjB,EAAciB,EAAEE,OAAOJ,aAG5CP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,aAAaG,QAAQ,QAAOF,SAAC,sBAG9CC,EAAAA,EAAAA,KAAA,SACEE,KAAK,OACLC,GAAG,QACHL,UAAU,eACVM,MAAOd,EACPe,SAAWC,GAAMf,EAASe,EAAEE,OAAOJ,aAGvCP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,kBAAkBY,QAhEtBC,KACtB,MAAMC,EAjB0BC,EAACC,EAASC,EAAMzB,KAChD,IAAI0B,EAAUC,WAAWH,GACzB,MAAMI,EAAoBD,WAAWF,GAAQ,IACvCI,EAAS,GACf,IAAK,IAAIC,EAAI,EAAGA,GAAK9B,EAAO8B,IAAK,CAC/B,MAAMC,EAASL,EAAUE,EACzBF,GAAWK,EACXF,EAAOG,KAAK,CACVC,KAAMH,EACNC,OAAQA,EACRL,QAASA,GAEb,CACA,OAAOG,CAAM,EAIaN,CACxB5B,EAAewB,QAAQ,KAAM,IAC7BrB,EACAoC,SAASlC,IAEXG,EAAWmB,EAAkB,EA0DwCb,SAAC,eAG9DC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,sBAAsBY,QA1D9Be,KAClBvC,EAAkB,SAClBG,EAAc,KACdE,EAAS,MACTE,EAAW,GAAG,EAsDuDM,SAAC,gBAKjEP,EAAQkC,OAAS,IAChB7B,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJF,EAAAA,EAAAA,MAAA,SACEC,UAAW,6BACC,SAAVJ,EAAmB,aAAe,IACjCK,SAAA,EACHC,EAAAA,EAAAA,KAAA,SAAAD,UACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBAGRC,EAAAA,EAAAA,KAAA,SAAAD,SACGP,EAAQmC,KAAKR,IACZtB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKoB,EAAOI,QACZvB,EAAAA,EAAAA,KAAA,MAAAD,UAAKQ,EAAAA,EAAAA,IAAuBY,EAAOE,OAAOO,QAAQ,OAClD5B,EAAAA,EAAAA,KAAA,MAAAD,UAAKQ,EAAAA,EAAAA,IAAuBY,EAAOH,QAAQY,QAAQ,QAH5CT,EAAOI,qBAWxB,C,qDC3HH,MAAMM,EAAkBzB,IAE7B,IAAKA,EAAO,MAAO,GAMnB,MAAM0B,GAHN1B,EAAQA,EAAM2B,WAAWtB,QAAQ,WAAY,KAGzBuB,MAAM,KAM1B,OAHAF,EAAM,GAAKA,EAAM,GAAGrB,QAAQ,wBAAyB,KAG9C,IAAIqB,EAAMG,KAAK,MAAM,EAIjBC,EAAiB9B,GAEvBA,GAGEa,WAAWb,EAAMK,QAAQ,WAAY,MAHzB,EAORF,EAA0BH,GAEhCA,EAGEA,EAAM2B,WAAWtB,QAAQ,wBAAyB,KAHtC,E","sources":["components/CompoundInterestCalculator/CompoundInterestCalculator.js","utils/format.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { formatNumberWithCommas } from '../../utils/format';\n\nconst CompoundInterestCalculator = () => {\n  const [initialCapital, setInitialCapital] = useState('10000');\n  const [weeklyRate, setWeeklyRate] = useState('1');\n  const [weeks, setWeeks] = useState('52'); // default to 52 weeks\n  const [results, setResults] = useState([]);\n  const theme = useSelector((state) => state.theme);\n\n  const calculateCompoundInterest = (initial, rate, weeks) => {\n    let capital = parseFloat(initial);\n    const weeklyRateDecimal = parseFloat(rate) / 100;\n    const result = [];\n    for (let i = 1; i <= weeks; i++) {\n      const profit = capital * weeklyRateDecimal;\n      capital += profit;\n      result.push({\n        week: i,\n        profit: profit,\n        capital: capital,\n      });\n    }\n    return result;\n  };\n\n  const handleCalculate = () => {\n    const calculatedResults = calculateCompoundInterest(\n      initialCapital.replace(/,/g, ''),\n      weeklyRate,\n      parseInt(weeks)\n    );\n    setResults(calculatedResults);\n  };\n\n  const resetFields = () => {\n    setInitialCapital('10000');\n    setWeeklyRate('1');\n    setWeeks('52');\n    setResults([]);\n  };\n\n  return (\n    <div className='card'>\n      <div className='card-header'>\n        <h5 className='card-title mb-0'>Compound Interest Calculator</h5>\n      </div>\n      <div className='card-body'>\n        <div className='form-inline'>\n          <div className='form-group mx-2'>\n            <label className='form-label' htmlFor='initialCapital'>\n              Initial Capital:\n            </label>\n            <input\n              type='text'\n              id='initialCapital'\n              className='form-control'\n              value={initialCapital}\n              onChange={(e) =>\n                setInitialCapital(\n                  formatNumberWithCommas(e.target.value.replace(/,/g, ''))\n                )\n              }\n            />\n          </div>\n          <div className='form-group mx-2'>\n            <label className='form-label' htmlFor='weeklyRate'>\n              Weekly Rate (%):\n            </label>\n            <input\n              type='text'\n              id='weeklyRate'\n              className='form-control'\n              value={weeklyRate}\n              onChange={(e) => setWeeklyRate(e.target.value)}\n            />\n          </div>\n          <div className='form-group mx-2'>\n            <label className='form-label' htmlFor='weeks'>\n              Number of Weeks:\n            </label>\n            <input\n              type='text'\n              id='weeks'\n              className='form-control'\n              value={weeks}\n              onChange={(e) => setWeeks(e.target.value)}\n            />\n          </div>\n          <div className='form-group button-group'>\n            <button className='btn btn-primary' onClick={handleCalculate}>\n              Calculate\n            </button>\n            <button className='btn btn-danger ml-2' onClick={resetFields}>\n              Reset\n            </button>\n          </div>\n        </div>\n        {results.length > 0 && (\n          <div>\n            <h5>Results:</h5>\n            <table\n              className={`table table-striped mt-3 ${\n                theme === 'dark' ? 'table-dark' : ''\n              }`}>\n              <thead>\n                <tr>\n                  <th>Week</th>\n                  <th>Weekly Profit ($)</th>\n                  <th>Capital ($)</th>\n                </tr>\n              </thead>\n              <tbody>\n                {results.map((result) => (\n                  <tr key={result.week}>\n                    <td>{result.week}</td>\n                    <td>{formatNumberWithCommas(result.profit.toFixed(2))}</td>\n                    <td>{formatNumberWithCommas(result.capital.toFixed(2))}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CompoundInterestCalculator;\n","// format.js\n\n// Function to format a numeric value as a currency string\nexport const formatCurrency = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and remove any non-numeric characters except for periods\n  value = value.toString().replace(/[^0-9.]/g, '');\n\n  // Split the value into integer and decimal parts\n  const parts = value.split('.');\n\n  // Add commas to the integer part of the number for better readability\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  // Join the integer and decimal parts back together and prepend a dollar sign\n  return `$${parts.join('.')}`;\n};\n\n// Function to parse a currency string back into a numeric value\nexport const parseCurrency = (value) => {\n  // Return 0 if the value is null or undefined\n  if (!value) return 0;\n\n  // Remove any non-numeric characters except for periods and convert the result to a float\n  return parseFloat(value.replace(/[^0-9.]/g, '')) || 0;\n};\n\n// Function to format a numeric value with commas as thousand separators\nexport const formatNumberWithCommas = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and add commas as thousand separators\n  return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n"],"names":["CompoundInterestCalculator","initialCapital","setInitialCapital","useState","weeklyRate","setWeeklyRate","weeks","setWeeks","results","setResults","theme","useSelector","state","_jsxs","className","children","_jsx","htmlFor","type","id","value","onChange","e","formatNumberWithCommas","target","replace","onClick","handleCalculate","calculatedResults","calculateCompoundInterest","initial","rate","capital","parseFloat","weeklyRateDecimal","result","i","profit","push","week","parseInt","resetFields","length","map","toFixed","formatCurrency","parts","toString","split","join","parseCurrency"],"sourceRoot":""}