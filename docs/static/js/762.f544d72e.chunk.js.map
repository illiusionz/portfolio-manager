{"version":3,"file":"static/js/762.f544d72e.chunk.js","mappings":"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","sources":["components/StockLineChart/StockLineChart.js","components/StockHoverPopup/StockHoverPopup.js","components/TrendingToolbar/TrendingToolbar.js","features/stocks/stockSelectors.js"],"sourcesContent":["// src/components/StockLineChart/StockLineChart.js\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\nimport { fetchHistoricalData } from '../../features/stocks/stockThunks';\nimport './StockLineChart.scss';\n\nconst StockLineChart = ({ symbol }) => {\n  const dispatch = useDispatch();\n\n  // Select historical data from Redux state\n  const historicalData = useSelector(\n    (state) => state.stocks.historicalData[symbol]\n  );\n\n  useEffect(() => {\n    // Fetch historical data when the component mounts\n    if (symbol && !historicalData) {\n      dispatch(fetchHistoricalData(symbol));\n    }\n  }, [dispatch, symbol, historicalData]);\n\n  // Check if historical data is available\n  if (!historicalData || historicalData.length === 0) {\n    return <div>Loading chart data...</div>; // Show loading message or null\n  }\n\n  return (\n    <ResponsiveContainer width='100%' height={100}>\n      <LineChart data={historicalData}>\n        <XAxis dataKey='timestamp' /> {/* Show time on x-axis */}\n        <YAxis domain={['auto', 'auto']} /> {/* Show price on y-axis */}\n        <Tooltip /> {/* Show tooltip on hover */}\n        <Line type='monotone' dataKey='close' stroke='#82ca9d' dot={false} />\n        {/* Add additional lines if needed */}\n        {/* <Line type='monotone' dataKey='vwap' stroke='#8884d8' dot={false} /> */}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default StockLineChart;\n","import React, { useRef, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport { addToWatchlist } from '../../features/watchlist/watchlistSlice';\nimport StockLineChart from '../StockLineChart/StockLineChart'; // Import the line chart component\n\nimport './StockHoverPopup.scss';\n\nconst StockHoverPopup = React.memo(\n  ({ stock, position, onMouseEnter, onMouseLeave }) => {\n    const dispatch = useDispatch();\n    const popupRef = useRef(null);\n\n    useEffect(() => {\n      const popupElement = popupRef.current;\n      if (popupElement && position) {\n        // Set the position of the popup dynamically below the hovered stock item\n        popupElement.style.top = `${position.top + position.height + 10}px`; // Place it below the stock item with some margin\n        popupElement.style.left = `${position.left}px`; // Align with the left edge of the stock item\n      }\n    }, [position]);\n\n    useEffect(() => {\n      console.log(`Hovered on stock: ${stock.ticker}`, stock);\n    }, [stock]);\n\n    if (!stock) return null;\n\n    const changePercent = stock.todaysChangePerc.toFixed(2);\n    const changeClass = changePercent >= 0 ? 'positive' : 'negative';\n    const arrowIcon = changePercent >= 0 ? faArrowUp : faArrowDown;\n\n    // Log only if the 'stock' prop changes\n\n    const handleAddToWatchlist = () => {\n      dispatch(addToWatchlist(stock.ticker));\n      console.log(`Added ${stock.ticker} to watchlist`);\n    };\n\n    const truncateText = (text, maxLength) => {\n      if (!text) return '';\n      if (text.length <= maxLength) return text;\n      return text.slice(0, maxLength) + '...';\n    };\n\n    const truncateName = (name) => {\n      if (!name) return '';\n      const cutOffIndex = Math.min(\n        name.indexOf('.') > -1 ? name.indexOf('.') : name.length,\n        name.indexOf(',') > -1 ? name.indexOf(',') : name.length\n      );\n      return name.substring(0, cutOffIndex);\n    };\n\n    return (\n      <div\n        ref={popupRef}\n        className='stock-hover-popup'\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}>\n        <div className='popup-header'>\n          <div className='popup-ticker'>\n            <span className='stock-symbol'>{stock.ticker}</span>\n            <span className='stock-name'>{truncateName(stock.name)}</span>\n          </div>\n          <button className='watch-button' onClick={handleAddToWatchlist}>\n            Watch\n          </button>\n        </div>\n        <div className='popup-price'>\n          <span className='stock-price'>${stock.prevDay.c}</span>\n          <span className={`price-change ${changeClass}`}>\n            <FontAwesomeIcon icon={arrowIcon} /> {stock.priceChange} (\n            {changePercent}%)\n          </span>\n        </div>\n        <div className='popup-chart'>\n          {stock.ticker ? (\n            <StockLineChart symbol={stock.ticker} />\n          ) : (\n            <div>No chart data available</div>\n          )}\n        </div>\n        <p className='popup-description'>\n          {truncateText(stock.description, 300) || 'No description available.'}\n        </p>\n      </div>\n    );\n  }\n);\n\nexport default StockHoverPopup;\n","// src/components/TrendingToolbar.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faArrowUp,\n  faArrowDown,\n  faCircleInfo,\n} from '@fortawesome/free-solid-svg-icons';\nimport './TrendingToolbar.scss';\nimport StockHoverPopup from '../StockHoverPopup/StockHoverPopup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  fetchBatchStockSnapshots,\n  fetchStockDetails,\n} from '../../features/stocks/stockThunks';\nimport {\n  selectAllStockSnapshots,\n  selectTrendingToolbarSymbols,\n  selectIndexToolbarSymbols,\n  selectStockDetails,\n} from '../../features/stocks/stockSelectors';\nimport { setUserHoveredSymbol } from '../../features/user/userSlice'; // Import the new action\n\nconst TrendingToolbar = () => {\n  const dispatch = useDispatch();\n  const [hoveredStock, setHoveredStock] = useState(null);\n  const [hoverPosition, setHoverPosition] = useState({\n    top: 0,\n    left: 0,\n    height: 0,\n  });\n  const [showPercentChange, setShowPercentChange] = useState(true);\n  const [isPaused, setIsPaused] = useState(false);\n\n  let hoverTimeout = null;\n  const toolbarRef = useRef(null);\n\n  const trendingSymbols = useSelector(selectTrendingToolbarSymbols);\n  const indexSymbols = useSelector(selectIndexToolbarSymbols);\n  const stockData = useSelector(selectAllStockSnapshots);\n\n  // Get detailed stock information for hovered stock\n  const stockDetails = useSelector((state) =>\n    selectStockDetails(state, hoveredStock?.ticker)\n  );\n\n  // Access user state\n  const userState = useSelector((state) => state.user);\n\n  // Access stocks state\n  const stocksState = useSelector((state) => state.stocks);\n\n  // Debug logs to see user and stocks state\n  useEffect(() => {\n    console.log('User State:', userState); // Logs the current user state\n    console.log('Stocks State:', stocksState); // Logs the current stocks state\n  }, []);\n\n  // Combine both index and manual stock tickers\n  const allTickers = [...indexSymbols, ...trendingSymbols];\n\n  // Fetch batched stock data on component mount\n  // Fetch batched stock data on component mount, only if data is not already available\n  useEffect(() => {\n    dispatch(fetchBatchStockSnapshots(allTickers));\n  }, []);\n\n  // Handle mouse enter event for stock items\n  const handleMouseEnter = (stock, event) => {\n    console.log('Hovered Stock:', stock); // Debug log\n    if (hoverTimeout) clearTimeout(hoverTimeout);\n    const stockItemRect = event.currentTarget.getBoundingClientRect();\n    setHoveredStock(stock);\n\n    console.log('Dispatching setUserHoveredSymbol with:', stock.ticker);\n    dispatch(setUserHoveredSymbol(stock.ticker)); // Update Redux state with hovered stock using updated action\n\n    setHoverPosition({\n      top: stockItemRect.top + window.scrollY,\n      left: stockItemRect.left + window.scrollX,\n      height: stockItemRect.height,\n    });\n    setIsPaused(true); // Pause the animation\n\n    // Fetch stock details when mouse enters\n    dispatch(fetchStockDetails(stock.ticker));\n  };\n\n  const handleMouseLeave = () => {\n    console.log('Mouse leave triggered');\n    if (hoverTimeout) clearTimeout(hoverTimeout);\n    hoverTimeout = setTimeout(() => {\n      if (!hoveredStock) return; // Avoid resetting if mouse enter happened again\n      console.log('Dispatching setUserHoveredSymbol with: null');\n      setHoveredStock(null);\n      dispatch(setUserHoveredSymbol(null)); // Clear Redux state using updated action\n      setIsPaused(false); // Resume the animation\n    }, 400); // Increase delay to check timing issue\n  };\n\n  const handlePopupMouseEnter = () => {\n    if (hoverTimeout) clearTimeout(hoverTimeout);\n    setIsPaused(true); // Pause the animation\n  };\n\n  const handlePopupMouseLeave = () => {\n    hoverTimeout = setTimeout(() => {\n      if (!hoveredStock) return; // Only clear if hoveredStock is still not set\n      setHoveredStock(null);\n      dispatch(setUserHoveredSymbol(null)); // Clear Redux state using updated action\n      setIsPaused(false); // Resume the animation\n    }, 200);\n  };\n\n  // Render each stock item with proper styling and data\n  const renderTrendingStock = (symbol, index) => {\n    const stock = stockData[symbol];\n\n    if (!stock) return null;\n    const changePercent = stock?.todaysChangePerc?.toFixed(2);\n    const changeClass = changePercent >= 0 ? 'positive' : 'negative';\n    const arrowIcon = changePercent >= 0 ? faArrowUp : faArrowDown;\n\n    return (\n      <div\n        key={`${symbol}-${index}`}\n        className={`stock-item ${changeClass}`}\n        onMouseEnter={(e) => handleMouseEnter(stock, e)}\n        onMouseLeave={handleMouseLeave}>\n        <span className='stock-symbol'>{stock.ticker}</span>\n        {showPercentChange ? (\n          <>\n            <FontAwesomeIcon icon={arrowIcon} />\n            <span className='stock-percent'>{changePercent}%</span>\n          </>\n        ) : (\n          <span className='stock-price'>${stock?.day?.c?.toFixed(2)}</span>\n        )}\n      </div>\n    );\n  };\n\n  const renderIndexStock = (symbol, index) => {\n    const stock = stockData[symbol];\n    if (!stock) return null;\n    const price = stock?.day?.c?.toFixed(2);\n    const changePercent = stock?.todaysChangePerc?.toFixed(2);\n    const changeClass = changePercent >= 0 ? 'positive' : 'negative';\n    const arrowIcon = changePercent >= 0 ? faArrowUp : faArrowDown;\n\n    return (\n      <div key={`${symbol}-${index}`} className={`stock-item ${changeClass}`}>\n        <span className='stock-symbol'>{stock.ticker}</span>\n        {showPercentChange ? (\n          <>\n            <FontAwesomeIcon icon={arrowIcon} />\n            <span className='stock-percent'>{changePercent}%</span>\n          </>\n        ) : (\n          <span className='stock-price'>${price}</span>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div\n      className={`trending-toolbar ${isPaused ? 'paused' : ''}`}\n      ref={toolbarRef}>\n      <div className='form-check form-switch'>\n        <input\n          className='form-check-input'\n          type='checkbox'\n          id='toggleSwitch'\n          checked={showPercentChange}\n          onChange={() => setShowPercentChange(!showPercentChange)}\n        />\n      </div>\n      <div className='index-data'>\n        {indexSymbols.map((symbol) => renderIndexStock(symbol))}\n\n        <span className='trending-label text-secondary'>\n          Trending <FontAwesomeIcon icon={faCircleInfo} />\n        </span>\n      </div>\n      <div className='trending-stocks'>\n        <div className='scroll-container'>\n          {trendingSymbols.map((symbol) => renderTrendingStock(symbol))}\n        </div>\n      </div>\n      {hoveredStock && (\n        <StockHoverPopup\n          stock={{ ...hoveredStock, ...stockDetails }} // Merge stock snapshot and details\n          position={hoverPosition}\n          onMouseEnter={handlePopupMouseEnter}\n          onMouseLeave={handlePopupMouseLeave}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default TrendingToolbar;\n","// src/features/stocks/stockSelectors.js\nimport { createSelector } from 'reselect';\n\n// Base selector to get the entire stocks state\nexport const selectStockState = (state) => state.stocks;\n\n// Memoized selector to get all stocks data as a dictionary with tickers as keys\nexport const selectAllStockSnapshots = createSelector(\n  [selectStockState],\n  (stocks) => stocks.stockTickerData || {}\n);\n\n// Select symbols for the Trending Toolbar\nexport const selectTrendingToolbarSymbols = createSelector(\n  [selectStockState],\n  (stocks) => stocks.trendingToolbarSymbols || []\n);\n\n// Select symbols for the Index Toolbar\nexport const selectIndexToolbarSymbols = createSelector(\n  [selectStockState],\n  (stocks) => stocks.indexToolbarSymbols || []\n);\n\n// Selector to get detailed stock information\nexport const selectStockDetails = createSelector(\n  [selectStockState, (_, symbol) => symbol],\n  (stocks, symbol) => stocks.stockDetails[symbol] || {}\n);\n\n// Memoized selector to get the full response data of a specific stock ticker\nexport const selectStockSnapshot = createSelector(\n  [selectStockState, (_, ticker) => ticker],\n  (stocks, ticker) => stocks.stockTickerData[ticker] || {}\n);\n\n// Memoized selector to get the stock price using the stock snapshot selector\nexport const selectStockPrice = createSelector(\n  [selectStockSnapshot],\n  (stockSnapshot) => stockSnapshot?.prevDay?.c ?? 0\n);\n\n// Memoized selector to get the 'prevDay' closing price ('c') for a given symbol\nexport const selectPrevDayClosingPrice = createSelector(\n  [selectStockSnapshot],\n  (stockSnapshot) => stockSnapshot?.prevDay?.c ?? null\n);\n\n// Memoized selector to get a specific field of a stock's data\nexport const selectStockField = createSelector(\n  [selectStockSnapshot, (_, field) => field],\n  (stockSnapshot, field) => (stockSnapshot ? stockSnapshot[field] : null)\n);\n\n// Selector to get any error in the stocks slice\nexport const selectStockError = createSelector(\n  [selectStockState],\n  (stocks) => stocks.error\n);\n"],"names":["_ref","symbol","dispatch","useDispatch","historicalData","useSelector","state","stocks","useEffect","fetchHistoricalData","length","_jsx","ResponsiveContainer","width","height","children","_jsxs","LineChart","data","XAxis","dataKey","YAxis","domain","Tooltip","Line","type","stroke","dot","React","stock","position","onMouseEnter","onMouseLeave","popupRef","useRef","popupElement","current","style","top","left","console","log","ticker","changePercent","todaysChangePerc","toFixed","changeClass","arrowIcon","faArrowUp","faArrowDown","ref","className","name","cutOffIndex","Math","min","indexOf","substring","truncateName","onClick","handleAddToWatchlist","addToWatchlist","prevDay","c","FontAwesomeIcon","icon","priceChange","StockLineChart","text","description","maxLength","slice","truncateText","TrendingToolbar","hoveredStock","setHoveredStock","useState","hoverPosition","setHoverPosition","showPercentChange","setShowPercentChange","isPaused","setIsPaused","hoverTimeout","toolbarRef","trendingSymbols","selectTrendingToolbarSymbols","indexSymbols","selectIndexToolbarSymbols","stockData","selectAllStockSnapshots","stockDetails","selectStockDetails","userState","user","stocksState","allTickers","fetchBatchStockSnapshots","handleMouseLeave","clearTimeout","setTimeout","setUserHoveredSymbol","renderTrendingStock","index","_stock$todaysChangePe","_stock$day","_stock$day$c","e","handleMouseEnter","event","stockItemRect","currentTarget","getBoundingClientRect","window","scrollY","scrollX","fetchStockDetails","_Fragment","day","id","checked","onChange","map","renderIndexStock","_stock$day2","_stock$day2$c","_stock$todaysChangePe2","price","faCircleInfo","StockHoverPopup","handlePopupMouseEnter","handlePopupMouseLeave","selectStockState","createSelector","stockTickerData","trendingToolbarSymbols","indexToolbarSymbols","_","selectStockSnapshot","selectStockPrice","stockSnapshot","_stockSnapshot$prevDa","_stockSnapshot$prevDa2","selectStockError","_stockSnapshot$prevDa3","_stockSnapshot$prevDa4","field","error"],"sourceRoot":""}