{"version":3,"file":"static/js/775.16cd9d0d.chunk.js","mappings":"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","sources":["features/stocks/stockSelectors.js","components/Portfolio/Portfolio.js","components/StockDetails/StockDetails.js","pages/PortfolioPage/PortfolioPage.js","utils/format.js"],"sourcesContent":["// src/features/stocks/stockSelectors.js\nimport { createSelector } from '@reduxjs/toolkit';\n\n// Selector to get detailed stock information\nexport const selectStockDetails = (state, symbol) =>\n  state.stocks.stockDetails[symbol] || {};\n\n// Selector to get the full response data of a specific stock ticker\n//export const selectStockTickerData = (state, ticker) => state.stocks.stockTickerData[ticker] || {};\n\n// Selector to get stock snapshot data for a given ticker\nexport const selectStockSnapshot = (state, ticker) =>\n  state.stocks.stockTickerData[ticker];\n\n// Selector to get stock price\nexport const selectStockPrice = createSelector(\n  [selectStockSnapshot],\n  (stockSnapshot) => stockSnapshot?.prevDay?.c ?? 0\n);\n\n// Selector to get the 'prevDay' closing price ('c') for a given symbol\nexport const selectPrevDayClosingPrice = createSelector(\n  [selectStockSnapshot],\n  (stockData) => stockData?.prevDay?.c ?? null\n);\n\n// Selector to get a specific field of a stock's data\nexport const selectStockField = createSelector(\n  [selectStockSnapshot, (_, field) => field],\n  (stockData, field) => (stockData ? stockData[field] : null)\n);\n\n// Selector to get any error in the stocks slice\nexport const selectStockError = (state) => state.stocks.error;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPortfolio } from '../../features/portfolio/portfolioSlice';\nimport { fetchStockDetails } from '../../features/stocks/stockThunks'; // Import stock details thunk\n\nconst Portfolio = ({ userId }) => {\n  const dispatch = useDispatch();\n  const portfolio = useSelector((state) => state.portfolio.portfolio);\n  const status = useSelector((state) => state.portfolio.status);\n  const error = useSelector((state) => state.portfolio.error);\n\n  // New selector for fetching stock details\n  const stockDetails = useSelector((state) => state.stocks.stockDetails);\n\n  useEffect(() => {\n    if (status === 'idle') {\n      dispatch(fetchPortfolio(userId));\n    }\n  }, [status, dispatch, userId]);\n\n  // Fetch stock details when portfolio is available\n  useEffect(() => {\n    if (portfolio?.stocks) {\n      portfolio.stocks.forEach((stock) => {\n        dispatch(fetchStockDetails(stock.symbol));\n      });\n    }\n  }, [dispatch, portfolio]);\n\n  if (status === 'loading') {\n    return <div>Loading...</div>;\n  }\n\n  if (status === 'failed') {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!portfolio || !portfolio.stocks) {\n    return <div>No portfolio data available</div>;\n  }\n\n  return (\n    <div className='container mt-4'>\n      <table className='table table-striped table-hover'>\n        <thead className='thead-dark'>\n          <tr>\n            <th scope='col'>Logo</th> {/* Added column for Logo */}\n            <th scope='col'>Holding</th>\n            <th scope='col'>Shares</th>\n            <th scope='col'>Cost per share</th>\n            <th scope='col'>Cost basis</th>\n            <th scope='col'>Current value</th>\n            <th scope='col'>Dividends</th>\n            <th scope='col'>Dividend yield</th>\n            <th scope='col'>Total profit</th>\n            <th scope='col'>Daily</th>\n          </tr>\n        </thead>\n        <tbody>\n          {portfolio.stocks.map((stock, index) => {\n            const details = stockDetails[stock.symbol]; // Access the details from state\n            return (\n              <tr key={index}>\n                {/* Display logo if available */}\n                <td>\n                  {details?.branding?.logo_url && (\n                    <img\n                      src={`https://assets.parqet.com/logos/symbol/${stock.symbol}`}\n                      alt={`${details.name} logo`}\n                      style={{ width: '50px' }}\n                    />\n                  )}\n                </td>\n                <td>{stock.symbol}</td>\n                <td>{stock.shares}</td>\n                <td>${stock.buyPrice}</td>\n                <td>${(stock.shares * stock.buyPrice).toFixed(2)}</td>\n                <td>${(stock.shares * stock.currentPrice).toFixed(2)}</td>\n                <td>$0.00</td>\n                <td>0%</td>\n                <td\n                  className={\n                    stock.currentPrice > stock.buyPrice\n                      ? 'text-success'\n                      : 'text-danger'\n                  }>\n                  $\n                  {(\n                    stock.shares *\n                    (stock.currentPrice - stock.buyPrice)\n                  ).toFixed(2)}\n                </td>\n                <td\n                  className={\n                    stock.currentPrice > stock.buyPrice\n                      ? 'text-success'\n                      : 'text-danger'\n                  }>\n                  ${(stock.currentPrice - stock.buyPrice).toFixed(2)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <p className='mt-4 fw-bold'>Total Value: ${portfolio.totalValue}</p>\n    </div>\n  );\n};\n\nexport default Portfolio;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchStockDetails } from '../../features/stocks/stockThunks';\nimport { selectStockDetails } from '../../features/stocks/stockSelectors';\nimport './StockDetails.scss';\nimport { formatCurrency } from '../../utils/format';\n\nconst StockDetails = ({ symbol }) => {\n  const dispatch = useDispatch();\n  const stockDetails = useSelector((state) =>\n    selectStockDetails(state, symbol)\n  );\n  const loading = useSelector((state) => state.stocks.loading);\n  const error = useSelector((state) => state.stocks.error);\n\n  useEffect(() => {\n    dispatch(fetchStockDetails(symbol));\n  }, [dispatch, symbol]);\n\n  if (loading) return <div className='stock-details'>Loading...</div>;\n  if (error)\n    return <div className='stock-details'>Error fetching stock details</div>;\n  if (!stockDetails)\n    return <div className='stock-details'>No stock details available</div>;\n\n  const {\n    name,\n    description,\n    branding: { icon_url, logo_url } = {},\n    market_cap,\n    phone_number,\n    total_employees,\n    locale,\n    primary_exchange,\n    ticker,\n    sic_description,\n    address1,\n    city,\n    postal_code,\n    state,\n  } = stockDetails;\n\n  return (\n    <div className='stock-details-card'>\n      <div className='stock-header'>\n        <img\n          src={`https://assets.parqet.com/logos/symbol/${symbol}`}\n          alt={`${name} logo`}\n          className='stock-logo'\n        />\n        <h2>{name}</h2>\n      </div>\n      <div className='stock-body'>\n        <div className='stock-info'>\n          <p>\n            <strong>Description:</strong> {description}\n          </p>\n          <p>\n            <strong>Market Cap:</strong> {formatCurrency(market_cap)}\n          </p>\n          <p>\n            <strong>Phone:</strong> {phone_number}\n          </p>\n          <p>\n            <strong>Employees:</strong> {total_employees}\n          </p>\n          <p>\n            <strong>Locale:</strong> {locale}\n          </p>\n          <p>\n            <strong>Primary Exchange:</strong> {primary_exchange}\n          </p>\n          <p>\n            <strong>Ticker:</strong> {ticker}\n          </p>\n          <p>\n            <strong>SIC Description:</strong> {sic_description}\n          </p>\n        </div>\n        <div className='stock-address'>\n          <h4>Address</h4>\n          <p>{address1}</p>\n          <p>\n            {city}, {state} {postal_code}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StockDetails;\n","// src/pages/PortfolioPage.js\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPortfolio } from '../../features/portfolio/portfolioSlice';\nimport Portfolio from '../../components/Portfolio/Portfolio';\nimport StockDetails from '../../components/StockDetails/StockDetails';\n\nconst PortfolioPage = () => {\n  const dispatch = useDispatch();\n  const testUserId = 'testUserId123'; // Replace with your test user ID\n  const portfolio = useSelector((state) => state.portfolio.portfolio);\n  const status = useSelector((state) => state.portfolio.status);\n  const error = useSelector((state) => state.portfolio.error);\n\n  useEffect(() => {\n    if (status === 'idle') {\n      dispatch(fetchPortfolio(testUserId));\n    }\n  }, [status, dispatch, testUserId]);\n\n  if (status === 'loading') {\n    return <div>Loading...</div>;\n  }\n\n  if (status === 'failed') {\n    return <div>Error: {error}</div>;\n  }\n\n  // Ensure portfolio is not undefined or null before rendering\n  if (!portfolio || !portfolio.stocks) {\n    return <div>No portfolio data available</div>;\n  }\n\n  return (\n    <div className='container mt-4'>\n      <h2 className='mb-4'>Stock Portfolio</h2>\n      <Portfolio portfolio={portfolio} />\n      <div className='mt-4'>\n        <h3>Stock Details</h3>\n        <StockDetails symbol={portfolio.stocks[0].symbol} />{' '}\n        {/* Example usage */}\n      </div>\n      <p>Built with Express.js, MongoDB, GraphQL, Apollo Server</p>\n    </div>\n  );\n};\n\nexport default PortfolioPage;\n","// format.js\n\n// Function to format a numeric value as a currency string\nexport const formatCurrency = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and remove any non-numeric characters except for periods\n  value = value.toString().replace(/[^0-9.]/g, '');\n\n  // Split the value into integer and decimal parts\n  const parts = value.split('.');\n\n  // Add commas to the integer part of the number for better readability\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  // Join the integer and decimal parts back together and prepend a dollar sign\n  return `$${parts.join('.')}`;\n};\n\n// Function to parse a currency string back into a numeric value\nexport const parseCurrency = (value) => {\n  // Return 0 if the value is null or undefined\n  if (!value) return 0;\n\n  // Remove any non-numeric characters except for periods and convert the result to a float\n  return parseFloat(value.replace(/[^0-9.]/g, '')) || 0;\n};\n\n// Function to format a numeric value with commas as thousand separators\nexport const formatNumberWithCommas = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and add commas as thousand separators\n  return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n"],"names":["selectStockDetails","state","symbol","stocks","stockDetails","selectStockSnapshot","ticker","stockTickerData","selectStockPrice","createSelector","stockSnapshot","_stockSnapshot$prevDa","_stockSnapshot$prevDa2","prevDay","c","selectStockError","stockData","_stockData$prevDay$c","_stockData$prevDay","_","field","error","_ref","userId","dispatch","useDispatch","portfolio","useSelector","status","useEffect","fetchPortfolio","forEach","stock","fetchStockDetails","_jsx","children","_jsxs","className","scope","map","index","_details$branding","details","branding","logo_url","src","alt","name","style","width","shares","buyPrice","toFixed","currentPrice","totalValue","loading","description","icon_url","market_cap","phone_number","total_employees","locale","primary_exchange","sic_description","address1","city","postal_code","formatCurrency","PortfolioPage","testUserId","Portfolio","StockDetails","value","parts","toString","replace","split","join","parseCurrency","parseFloat","formatNumberWithCommas"],"sourceRoot":""}