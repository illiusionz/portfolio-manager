{"version":3,"file":"static/js/947.fd0de6dd.chunk.js","mappings":"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","sources":["components/PercentageDifferenceCalculator/PercentageDifferenceCalculator.js","components/shared/SymbolAutoSuggest.js","features/stocks/stockSelectors.js","features/user/userThunks.js","utils/format.js"],"sourcesContent":["// src/components/PercentageDifferenceCalculator.js\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './_percentageDifferenceCalculator.scss';\nimport { fetchStockSnapshot } from '../../features/stocks/stockThunks';\nimport { selectStockSnapshot } from '../../features/stocks/stockSelectors';\nimport { setUserSymbol } from '../../features/user/userSlice';\nimport {\n  formatNumberWithCommas,\n  formatCurrency,\n  parseCurrency,\n} from '../../utils/format';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowsRotate } from '@fortawesome/free-solid-svg-icons';\nimport SymbolAutoSuggest from '../shared/SymbolAutoSuggest';\n\nconst PercentageDifferenceCalculator = () => {\n  const dispatch = useDispatch();\n\n  // State selectors\n  const symbol = useSelector((state) => state.user.symbol); // User selected symbol\n  const stockSnapshot = useSelector((state) =>\n    selectStockSnapshot(state, symbol)\n  ); // Fetch stock snapshot data\n\n  // Local state management\n  const [targetPrice, setTargetPrice] = useState('');\n  const [currentPrice, setCurrentPrice] = useState('');\n  const [percentageChange, setPercentageChange] = useState('0.00');\n  const [isRotating, setIsRotating] = useState(false);\n\n  useEffect(() => {\n    if (symbol) {\n      dispatch(fetchStockSnapshot(symbol));\n    }\n  }, [symbol, dispatch]);\n\n  useEffect(() => {\n    if (stockSnapshot?.prevDay?.c) {\n      const formattedPrice = formatCurrency(stockSnapshot.prevDay.c.toFixed(2));\n      setCurrentPrice(formattedPrice);\n    }\n  }, [stockSnapshot]);\n\n  useEffect(() => {\n    calculatePercentageChange();\n  }, [targetPrice, currentPrice]);\n\n  // Helper functions\n  const calculatePercentageChange = () => {\n    if (!currentPrice || !targetPrice) {\n      setPercentageChange('0.00');\n      return;\n    }\n    const change =\n      ((parseCurrency(targetPrice) - parseCurrency(currentPrice)) /\n        parseCurrency(currentPrice)) *\n      100;\n    setPercentageChange(isNaN(change) ? '0.00' : change.toFixed(2));\n  };\n\n  const resetFields = () => {\n    setTargetPrice('');\n    setPercentageChange('0.00');\n    if (stockSnapshot?.prevDay?.c) {\n      setCurrentPrice(formatCurrency(stockSnapshot.prevDay.c.toFixed(2)));\n    } else {\n      setCurrentPrice('$0.00');\n    }\n  };\n\n  const onSymbolSelected = (selectedSymbol) => {\n    dispatch(setUserSymbol(selectedSymbol));\n    resetFields();\n  };\n\n  const handleTargetPriceChange = (event) => {\n    const value = event.target.value.replace(/[^0-9.]/g, '');\n    setTargetPrice(formatCurrency(value));\n  };\n\n  const refreshCurrentPrice = () => {\n    if (symbol) {\n      dispatch(fetchStockSnapshot(symbol))\n        .unwrap()\n        .then((result) => {\n          if (result?.day?.c) {\n            setCurrentPrice(formatCurrency(result.day.c.toFixed(2)));\n          } else {\n            setCurrentPrice('$0.00');\n          }\n          setIsRotating(true);\n          setTimeout(() => setIsRotating(false), 500);\n        })\n        .catch((error) => {\n          console.error('Error refreshing stock price:', error);\n        });\n    } else {\n      console.warn('No symbol selected for refresh');\n    }\n  };\n\n  return (\n    <div className='percentage-difference-calculator'>\n      <div className='card'>\n        <div className='card-header'>\n          <h5 className='card-title mb-0'>Stock Price % Change</h5>\n          <FontAwesomeIcon\n            icon={faArrowsRotate}\n            className={`card-refresh ${isRotating ? 'rotating' : ''}`}\n            onClick={refreshCurrentPrice}\n          />\n        </div>\n        <div className='card-body'>\n          <form onSubmit={(e) => e.preventDefault()}>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='stockName'>\n                Stock Name:\n              </label>\n              <SymbolAutoSuggest onSuggestionSelected={onSymbolSelected} />\n            </div>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='currentPrice'>\n                Current Price:\n              </label>\n              <input\n                type='text'\n                id='currentPrice'\n                className='form-control'\n                value={currentPrice}\n                readOnly\n                placeholder='$0.00'\n              />\n            </div>\n            <div className='form-group'>\n              <label className='form-label' htmlFor='targetPrice'>\n                Target Price:\n              </label>\n              <input\n                type='text'\n                id='targetPrice'\n                className='form-control'\n                value={targetPrice}\n                onChange={handleTargetPriceChange}\n                placeholder='$0.00'\n              />\n            </div>\n\n            <div className='button-group'>\n              <button\n                type='button'\n                className='btn btn-primary'\n                onClick={calculatePercentageChange}>\n                Calculate\n              </button>\n              <button\n                type='button'\n                className='btn btn-danger'\n                onClick={resetFields}>\n                Reset\n              </button>\n            </div>\n          </form>\n          <div className='result mt-3'>\n            <h6>\n              <strong>Percent Change:</strong> {percentageChange}%\n            </h6>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PercentageDifferenceCalculator;\n","import React, { useState, useEffect } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { setSymbolAndFetchData } from '../../features/user/userThunks';\nimport './_symbolAutoSuggest.scss';\n\nconst SymbolAutoSuggest = () => {\n  const dispatch = useDispatch();\n  const selectedSymbol = useSelector((state) => state.user.symbol); // Redux state for the selected symbol\n  const [query, setQuery] = useState(''); // Local state for the input value\n  const [suggestions, setSuggestions] = useState([]);\n  const apiKey = process.env.REACT_APP_POLYGON_API_KEY;\n\n  // Sync the local query state with the Redux selectedSymbol on mount and whenever selectedSymbol changes\n  useEffect(() => {\n    // Check localStorage for a saved stock symbol and update Redux\n    const savedSymbol = localStorage.getItem('selectedStockSymbol');\n    if (savedSymbol && !selectedSymbol) {\n      dispatch(setSymbolAndFetchData(savedSymbol)); // Update Redux with the saved symbol\n    }\n\n    if (selectedSymbol) {\n      setQuery(selectedSymbol); // Update local input if Redux has the symbol\n    }\n  }, [selectedSymbol, dispatch]);\n\n  // Fetch suggestions based on the current input value\n  const onSuggestionsFetchRequested = async ({ value }) => {\n    if (value.length < 1) {\n      setSuggestions([]);\n      return;\n    }\n    try {\n      const response = await axios.get(\n        `https://api.polygon.io/v3/reference/tickers?search=${value}&active=true&sort=ticker&order=asc&limit=10&apiKey=${apiKey}`\n      );\n      setSuggestions(response.data.results || []);\n    } catch (error) {\n      console.error('Error fetching suggestions:', error);\n      setSuggestions([]);\n    }\n  };\n\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  // Handle when a suggestion is selected from the dropdown\n  const onSuggestionSelected = (event, { suggestion }) => {\n    const selectedSymbol = suggestion.ticker;\n    setQuery(selectedSymbol); // Update the input field to show the selected symbol\n    dispatch(setSymbolAndFetchData(selectedSymbol)); // Dispatch to update Redux with the new symbol\n\n    // Save the selected symbol to localStorage for persistence\n    localStorage.setItem('selectedStockSymbol', selectedSymbol);\n  };\n\n  const inputProps = {\n    placeholder: 'Search for a stock',\n    value: query, // Sync the input field with the local query state\n    onChange: (event, { newValue }) => {\n      setQuery(newValue); // Update the local input state only when typing\n    },\n  };\n\n  return (\n    <div className='symbol-auto-suggest'>\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        getSuggestionValue={(suggestion) => suggestion.ticker}\n        renderSuggestion={(suggestion) => (\n          <div className='suggestion-item'>\n            <span className='suggestion-ticker'>{suggestion.ticker}</span>\n            <span className='suggestion-name'>{suggestion.name}</span>\n          </div>\n        )}\n        inputProps={inputProps}\n        onSuggestionSelected={onSuggestionSelected} // Dispatch to Redux and persist to localStorage on suggestion selection\n      />\n    </div>\n  );\n};\n\nexport default SymbolAutoSuggest;\n","// src/features/stocks/stockSelectors.js\nimport { createSelector } from '@reduxjs/toolkit';\n\n// Selector to get detailed stock information\nexport const selectStockDetails = (state, symbol) =>\n  state.stocks.stockDetails[symbol] || {};\n\n// Selector to get the full response data of a specific stock ticker\n//export const selectStockTickerData = (state, ticker) => state.stocks.stockTickerData[ticker] || {};\n\n// Selector to get stock snapshot data for a given ticker\nexport const selectStockSnapshot = (state, ticker) =>\n  state.stocks.stockTickerData[ticker];\n\n// Selector to get stock price\nexport const selectStockPrice = createSelector(\n  [selectStockSnapshot],\n  (stockSnapshot) => stockSnapshot?.prevDay?.c ?? 0\n);\n\n// Selector to get the 'prevDay' closing price ('c') for a given symbol\nexport const selectPrevDayClosingPrice = createSelector(\n  [selectStockSnapshot],\n  (stockData) => stockData?.prevDay?.c ?? null\n);\n\n// Selector to get a specific field of a stock's data\nexport const selectStockField = createSelector(\n  [selectStockSnapshot, (_, field) => field],\n  (stockData, field) => (stockData ? stockData[field] : null)\n);\n\n// Selector to get any error in the stocks slice\nexport const selectStockError = (state) => state.stocks.error;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { setUserSymbol } from './userSlice';\nimport { fetchStockSnapshot } from '../stocks/stockThunks';\nimport { fetchNews } from '../news/newsThunks';\nimport { fetchWatchlistData } from '../watchlist/watchlistThunks';\n\nexport const setSymbolAndFetchData = createAsyncThunk(\n  'user/setSymbolAndFetchData',\n  async (symbol, { dispatch }) => {\n    dispatch(setUserSymbol(symbol));\n    await dispatch(fetchStockSnapshot(symbol));\n    await dispatch(fetchNews(symbol));\n    await dispatch(fetchWatchlistData([symbol]));\n  }\n);\n","// format.js\n\n// Function to format a numeric value as a currency string\nexport const formatCurrency = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and remove any non-numeric characters except for periods\n  value = value.toString().replace(/[^0-9.]/g, '');\n\n  // Split the value into integer and decimal parts\n  const parts = value.split('.');\n\n  // Add commas to the integer part of the number for better readability\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  // Join the integer and decimal parts back together and prepend a dollar sign\n  return `$${parts.join('.')}`;\n};\n\n// Function to parse a currency string back into a numeric value\nexport const parseCurrency = (value) => {\n  // Return 0 if the value is null or undefined\n  if (!value) return 0;\n\n  // Remove any non-numeric characters except for periods and convert the result to a float\n  return parseFloat(value.replace(/[^0-9.]/g, '')) || 0;\n};\n\n// Function to format a numeric value with commas as thousand separators\nexport const formatNumberWithCommas = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and add commas as thousand separators\n  return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n"],"names":["PercentageDifferenceCalculator","dispatch","useDispatch","symbol","useSelector","state","user","stockSnapshot","selectStockSnapshot","targetPrice","setTargetPrice","useState","currentPrice","setCurrentPrice","percentageChange","setPercentageChange","isRotating","setIsRotating","useEffect","fetchStockSnapshot","_stockSnapshot$prevDa","prevDay","c","formattedPrice","formatCurrency","toFixed","calculatePercentageChange","change","parseCurrency","isNaN","resetFields","_stockSnapshot$prevDa2","_jsx","className","children","_jsxs","FontAwesomeIcon","icon","faArrowsRotate","onClick","refreshCurrentPrice","unwrap","then","result","_result$day","day","setTimeout","catch","error","console","warn","onSubmit","e","preventDefault","htmlFor","SymbolAutoSuggest","onSuggestionSelected","selectedSymbol","setUserSymbol","type","id","value","readOnly","placeholder","onChange","event","target","replace","query","setQuery","suggestions","setSuggestions","savedSymbol","localStorage","getItem","setSymbolAndFetchData","inputProps","_ref3","newValue","Autosuggest","onSuggestionsFetchRequested","async","_ref","length","response","axios","get","data","results","onSuggestionsClearRequested","getSuggestionValue","suggestion","ticker","renderSuggestion","name","_ref2","setItem","selectStockDetails","stocks","stockDetails","stockTickerData","selectStockPrice","createSelector","selectStockError","stockData","_stockData$prevDay$c","_stockData$prevDay","_","field","createAsyncThunk","fetchNews","fetchWatchlistData","parts","toString","split","join","parseFloat","formatNumberWithCommas"],"sourceRoot":""}