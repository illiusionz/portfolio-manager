{"version":3,"file":"static/js/445.2b368df6.chunk.js","mappings":"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","sources":["components/NavBar/NavBar.js","components/shared/SymbolAutoSuggest.js","features/user/userThunks.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faBars,\n  faSun,\n  faMoon,\n  faSearch,\n} from '@fortawesome/free-solid-svg-icons';\nimport './_navBar.scss';\nimport { setTheme } from '../../features/theme/themeSlice'; // Redux slice\nimport profileImage from '../../assets/images/user-image.jpg';\nimport SymbolAutoSuggest from '../shared/SymbolAutoSuggest'; // Importing shared autosuggest\nimport { setSymbolAndFetchData } from '../../features/user/userThunks'; // Unified action\n\nconst Navbar = ({ toggleSidebar, handleSymbolSearch }) => {\n  const symbol = useSelector((state) => state.user.symbol); // Get the selected symbol from Redux\n  const theme = useSelector((state) => state.theme);\n  const dispatch = useDispatch();\n\n  // Fetch saved theme from local storage\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      dispatch(setTheme(savedTheme));\n    }\n  }, [dispatch]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (symbol) {\n      dispatch(setSymbolAndFetchData(symbol)); // Unified action to fetch and sync symbol\n    }\n  };\n\n  const handleToggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    dispatch(setTheme(newTheme)); // Toggle theme and persist in local storage\n    localStorage.setItem('theme', newTheme);\n  };\n\n  return (\n    <nav className='navbar navbar-expand-lg'>\n      <button className='btn btn-primary' onClick={toggleSidebar}>\n        <FontAwesomeIcon icon={faBars} />\n      </button>\n      <form className='form-inline my-2 my-lg-0' onSubmit={onSubmit}>\n        <div className='input-group'>\n          <SymbolAutoSuggest /> {/* Symbol synced via Redux */}\n        </div>\n        <button className='btn btn-primary ms-1 my-2 my-sm-0' type='submit'>\n          <FontAwesomeIcon icon={faSearch} />\n        </button>\n      </form>\n      <button\n        className='btn btn-light ms-auto my-2 my-sm-0 theme-toggle'\n        type='button'\n        onClick={handleToggleTheme}>\n        <FontAwesomeIcon icon={theme === 'dark' ? faSun : faMoon} />\n      </button>\n      <ul className='navbar-nav navbar-align'>\n        <li className='nav-item dropdown'>\n          <div className='nav-link dropdown-toggle'>\n            <img src={profileImage} alt='User' className='user-image' />\n            <span className='user-name'>Jeff Liu</span>\n          </div>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { useState, useEffect } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { setSymbolAndFetchData } from '../../features/user/userThunks';\n\nconst SymbolAutoSuggest = () => {\n  const dispatch = useDispatch();\n  const selectedSymbol = useSelector((state) => state.user.symbol); // Redux state for the selected symbol\n  const [query, setQuery] = useState(''); // Local state for the input value\n  const [suggestions, setSuggestions] = useState([]);\n  const apiKey = process.env.REACT_APP_POLYGON_API_KEY;\n\n  // Sync the local query state with the Redux selectedSymbol on mount and whenever selectedSymbol changes\n  useEffect(() => {\n    // Check localStorage for a saved stock symbol and update Redux\n    const savedSymbol = localStorage.getItem('selectedStockSymbol');\n    if (savedSymbol && !selectedSymbol) {\n      dispatch(setSymbolAndFetchData(savedSymbol)); // Update Redux with the saved symbol\n    }\n\n    if (selectedSymbol) {\n      setQuery(selectedSymbol); // Update local input if Redux has the symbol\n    }\n  }, [selectedSymbol, dispatch]);\n\n  // Fetch suggestions based on the current input value\n  const onSuggestionsFetchRequested = async ({ value }) => {\n    if (value.length < 1) {\n      setSuggestions([]);\n      return;\n    }\n    try {\n      const response = await axios.get(\n        `https://api.polygon.io/v3/reference/tickers?search=${value}&active=true&sort=ticker&order=asc&limit=10&apiKey=${apiKey}`\n      );\n      setSuggestions(response.data.results || []);\n    } catch (error) {\n      console.error('Error fetching suggestions:', error);\n      setSuggestions([]);\n    }\n  };\n\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  // Handle when a suggestion is selected from the dropdown\n  const onSuggestionSelected = (event, { suggestion }) => {\n    const selectedSymbol = suggestion.ticker;\n    setQuery(selectedSymbol); // Update the input field to show the selected symbol\n    dispatch(setSymbolAndFetchData(selectedSymbol)); // Dispatch to update Redux with the new symbol\n\n    // Save the selected symbol to localStorage for persistence\n    localStorage.setItem('selectedStockSymbol', selectedSymbol);\n  };\n\n  const inputProps = {\n    placeholder: 'Search for a stock',\n    value: query, // Sync the input field with the local query state\n    onChange: (event, { newValue }) => {\n      setQuery(newValue); // Update the local input state only when typing\n    },\n  };\n\n  return (\n    <div className='symbol-auto-suggest'>\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        getSuggestionValue={(suggestion) => suggestion.ticker}\n        renderSuggestion={(suggestion) => (\n          <div className='suggestion-item'>\n            <span className='suggestion-ticker'>{suggestion.ticker}</span>\n            <span className='suggestion-name'>{suggestion.name}</span>\n          </div>\n        )}\n        inputProps={inputProps}\n        onSuggestionSelected={onSuggestionSelected} // Dispatch to Redux and persist to localStorage on suggestion selection\n      />\n    </div>\n  );\n};\n\nexport default SymbolAutoSuggest;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { setUserSymbol } from './userSlice';\nimport { fetchStockPrice } from '../stocks/stockThunks';\nimport { fetchNews } from '../news/newsThunks';\nimport { fetchWatchlistData } from '../watchlist/watchlistThunks';\n\nexport const setSymbolAndFetchData = createAsyncThunk(\n  'user/setSymbolAndFetchData',\n  async (symbol, { dispatch }) => {\n    dispatch(setUserSymbol(symbol));\n    await dispatch(fetchStockPrice(symbol));\n    await dispatch(fetchNews(symbol));\n    await dispatch(fetchWatchlistData([symbol]));\n  }\n);\n"],"names":["_ref","toggleSidebar","handleSymbolSearch","symbol","useSelector","state","user","theme","dispatch","useDispatch","useEffect","savedTheme","localStorage","getItem","setTheme","_jsxs","className","children","_jsx","onClick","FontAwesomeIcon","icon","faBars","onSubmit","e","preventDefault","setSymbolAndFetchData","SymbolAutoSuggest","type","faSearch","handleToggleTheme","newTheme","setItem","faSun","faMoon","src","alt","selectedSymbol","query","setQuery","useState","suggestions","setSuggestions","savedSymbol","inputProps","placeholder","value","onChange","event","_ref3","newValue","Autosuggest","onSuggestionsFetchRequested","async","length","response","axios","get","data","results","error","console","onSuggestionsClearRequested","getSuggestionValue","suggestion","ticker","renderSuggestion","name","onSuggestionSelected","_ref2","createAsyncThunk","setUserSymbol","fetchStockPrice","fetchNews","fetchWatchlistData"],"sourceRoot":""}