{"version":3,"file":"static/js/887.05cd0420.chunk.js","mappings":"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","sources":["components/shared/SymbolAutoSuggest.js","features/user/userThunks.js","layout/NavBar/NavBar.js"],"sourcesContent":["// src/components/SymbolAutoSuggest/SymbolAutoSuggest.js\nimport React, { useState, useEffect } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSymbolAndFetchData } from '../../features/user/userThunks';\nimport { fetchSymbolSuggestions } from '../../features/stocks/stockThunks'; // Import the new thunk\nimport { clearSuggestions } from '../../features/stocks/stockSlice'; // Import the clearSuggestions action\n\nimport './SymbolAutoSuggest.scss';\n\nconst SymbolAutoSuggest = () => {\n  const dispatch = useDispatch();\n  const selectedSymbol = useSelector((state) => state.user.userSymbol); // Redux state for the selected symbol\n  const suggestions = useSelector((state) => state.stocks.suggestions || []); // Redux state for suggestions\n  const [query, setQuery] = useState(''); // Local state for the input value\n\n  // Sync the local query state with the Redux selectedSymbol on mount and whenever selectedSymbol changes\n  useEffect(() => {\n    // Check localStorage for a saved stock symbol and update Redux\n    const savedSymbol = localStorage.getItem('selectedStockSymbol');\n    if (savedSymbol && !selectedSymbol) {\n      dispatch(setSymbolAndFetchData(savedSymbol)); // Update Redux with the saved symbol\n    }\n\n    if (selectedSymbol) {\n      setQuery(selectedSymbol); // Update local input if Redux has the symbol\n    }\n  }, [selectedSymbol, dispatch]);\n\n  // Fetch suggestions based on the current input value\n  const onSuggestionsFetchRequested = ({ value }) => {\n    if (value.length < 1) {\n      dispatch(fetchSymbolSuggestions.fulfilled([])); // Clear suggestions in Redux\n      return;\n    }\n    // Dispatch the thunk to fetch suggestions from the API\n    dispatch(fetchSymbolSuggestions(value));\n  };\n\n  const onSuggestionsClearRequested = () => {\n    dispatch(clearSuggestions()); // Dispatch the clearSuggestions action\n  };\n\n  // Handle when a suggestion is selected from the dropdown\n  const onSuggestionSelected = (event, { suggestion }) => {\n    const selectedSymbol = suggestion.ticker;\n    setQuery(selectedSymbol); // Update the input field to show the selected symbol\n    dispatch(setSymbolAndFetchData(selectedSymbol)); // Dispatch to update Redux with the new symbol\n\n    // Save the selected symbol to localStorage for persistence\n    localStorage.setItem('selectedStockSymbol', selectedSymbol);\n    console.log('Selected symbol:', selectedSymbol);\n  };\n\n  const inputProps = {\n    placeholder: 'Search for a stock',\n    value: query, // Sync the input field with the local query state\n    onChange: (event, { newValue }) => {\n      setQuery(newValue); // Update the local input state only when typing\n    },\n  };\n\n  return (\n    <div className='symbol-auto-suggest'>\n      <Autosuggest\n        suggestions={suggestions} // Use suggestions from Redux state\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        getSuggestionValue={(suggestion) => suggestion.ticker}\n        renderSuggestion={(suggestion) => (\n          <div className='suggestion-item'>\n            <span className='suggestion-ticker'>{suggestion.ticker}</span>\n            <span className='suggestion-name'>{suggestion.name}</span>\n          </div>\n        )}\n        inputProps={inputProps}\n        onSuggestionSelected={onSuggestionSelected} // Dispatch to Redux and persist to localStorage on suggestion selection\n      />\n    </div>\n  );\n};\n\nexport default SymbolAutoSuggest;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { setUserSymbol } from './userSlice';\nimport { fetchStockSnapshot } from '../stocks/stockThunks';\nimport { fetchNews } from '../news/newsThunks';\nimport { fetchWatchlistData } from '../watchlist/watchlistThunks';\n\nexport const setSymbolAndFetchData = createAsyncThunk(\n  'user/setSymbolAndFetchData',\n  async (symbol, { dispatch }) => {\n    dispatch(setUserSymbol(symbol));\n    await dispatch(fetchStockSnapshot(symbol));\n    await dispatch(fetchNews(symbol));\n    await dispatch(fetchWatchlistData([symbol]));\n  }\n);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faBars,\n  faSun,\n  faMoon,\n  faSearch,\n} from '@fortawesome/free-solid-svg-icons';\nimport './_navBar.scss';\nimport { setTheme } from '../../features/theme/themeSlice'; // Redux slice\nimport profileImage from '../../assets/images/user-image.jpg';\nimport SymbolAutoSuggest from '../../components/shared/SymbolAutoSuggest'; // Importing shared autosuggest\nimport { setSymbolAndFetchData } from '../../features/user/userThunks'; // Unified action\nimport { addToWatchlist } from '../../features/watchlist/watchlistSlice'; // Corrected path\n\nconst Navbar = ({ toggleSidebar, handleSymbolSearch }) => {\n  const userSymbol = useSelector((state) => state.user.userSymbol); // Get the selected symbol from Redux\n  const theme = useSelector((state) => state.theme);\n  const watchlist = useSelector((state) => state.watchlist.symbols);\n\n  const dispatch = useDispatch();\n\n  // Fetch saved theme from local storage\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      dispatch(setTheme(savedTheme));\n    }\n  }, [dispatch]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (userSymbol) {\n      dispatch(setSymbolAndFetchData(userSymbol)); // Unified action to fetch and sync symbol\n    }\n  };\n\n  const onAddToWatchlist = () => {\n    if (userSymbol && !watchlist.includes(userSymbol)) {\n      dispatch(addToWatchlist(userSymbol));\n    }\n  };\n\n  useEffect(() => {\n    document.body.className = theme === 'dark' ? 'theme-dark' : 'theme-light';\n  }, [theme]);\n\n  const handleToggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    dispatch(setTheme(newTheme)); // Toggle theme and persist in local storage\n    localStorage.setItem('theme', newTheme);\n  };\n\n  return (\n    <nav className='navbar navbar-expand-lg'>\n      <button className='btn btn-primary' onClick={toggleSidebar}>\n        <FontAwesomeIcon icon={faBars} />\n      </button>\n      <form className='form-inline my-2 my-lg-0' onSubmit={onSubmit}>\n        <div className='input-group'>\n          <SymbolAutoSuggest /> {/* Symbol synced via Redux */}\n        </div>\n        <button className='btn btn-primary ms-1 my-2 my-sm-0' type='submit'>\n          <FontAwesomeIcon icon={faSearch} />\n        </button>\n        <button\n          className='btn btn-primary ms-1  my-2 my-sm-0'\n          type='button'\n          onClick={onAddToWatchlist}>\n          Add to Watch List\n        </button>\n      </form>\n      <button\n        className='btn btn-light ms-auto my-2 my-sm-0 theme-toggle'\n        type='button'\n        onClick={handleToggleTheme}>\n        <FontAwesomeIcon icon={theme === 'dark' ? faSun : faMoon} />\n      </button>\n      <ul className='navbar-nav navbar-align'>\n        <li className='nav-item dropdown'>\n          <div className='nav-link dropdown-toggle'>\n            <img src={profileImage} alt='User' className='user-image' />\n            <span className='user-name'>Jeff Liu</span>\n          </div>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n"],"names":["SymbolAutoSuggest","dispatch","useDispatch","selectedSymbol","useSelector","state","user","userSymbol","suggestions","stocks","query","setQuery","useState","useEffect","savedSymbol","localStorage","getItem","setSymbolAndFetchData","inputProps","placeholder","value","onChange","event","_ref3","newValue","_jsx","className","children","Autosuggest","onSuggestionsFetchRequested","_ref","length","fetchSymbolSuggestions","fulfilled","onSuggestionsClearRequested","clearSuggestions","getSuggestionValue","suggestion","ticker","renderSuggestion","_jsxs","name","onSuggestionSelected","_ref2","setItem","console","log","createAsyncThunk","async","symbol","setUserSymbol","fetchStockSnapshot","fetchNews","fetchWatchlistData","toggleSidebar","handleSymbolSearch","theme","watchlist","symbols","savedTheme","setTheme","document","body","onClick","FontAwesomeIcon","icon","faBars","onSubmit","e","preventDefault","type","faSearch","onAddToWatchlist","includes","addToWatchlist","handleToggleTheme","newTheme","faSun","faMoon","src","alt"],"sourceRoot":""}