{"version":3,"file":"static/js/960.e416b10b.chunk.js","mappings":"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","sources":["components/DividendInfo/DividendInfo.js","components/shared/SymbolAutoSuggest.js","utils/format.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["// src/components/DividendInfo/DividendInfo.js\nimport './DividendInfo.scss';\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { formatNumberWithCommas, parseCurrency } from '../../utils/format';\nimport { setUserSymbol } from '../../features/user/userSlice';\nimport { selectUserSymbol } from '../../features/user/userSelectors';\nimport { selectTheme } from '../../features/theme/themeSelectors';\nimport SymbolAutoSuggest from '../shared/SymbolAutoSuggest';\n\nconst DividendInfo = () => {\n  const dispatch = useDispatch();\n  const userSymbol = useSelector(selectUserSymbol);\n  const watchlist = useSelector((state) => state.watchlist.symbols);\n  const [dividends, setDividends] = useState([]);\n  const [numberOfShares, setNumberOfShares] = useState('');\n  const [calculatedDividend, setCalculatedDividend] = useState(null);\n  const theme = useSelector(selectTheme);\n\n  const apiKey = process.env.REACT_APP_POLYGON_API_KEY;\n\n  useEffect(() => {\n    const fetchDividends = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.polygon.io/v3/reference/dividends?ticker=${userSymbol}&apiKey=${apiKey}`\n        );\n        setDividends(response.data.results || []);\n      } catch (error) {\n        console.error('Error fetching dividend data:', error);\n      }\n    };\n\n    if (userSymbol) {\n      fetchDividends();\n    }\n  }, [userSymbol]);\n\n  // Handle the selection of a new stock symbol\n  const handleSymbolSelection = (selectedSymbol) => {\n    dispatch(setUserSymbol(selectedSymbol));\n    fetchDividends(selectedSymbol);\n  };\n\n  const fetchDividends = async (selectedSymbol) => {\n    try {\n      const response = await axios.get(\n        `https://api.polygon.io/v3/reference/dividends?ticker=${selectedSymbol}&apiKey=${apiKey}`\n      );\n      setDividends(response.data.results || []);\n      setCalculatedDividend(null); // Reset the calculated dividend when symbol changes\n    } catch (error) {\n      console.error('Error fetching dividend data:', error);\n    }\n  };\n\n  const handleCalculate = () => {\n    const selectedDividend = dividends.find(\n      (dividend) => dividend.ticker === userSymbol.toUpperCase()\n    );\n    if (selectedDividend && numberOfShares) {\n      const totalDividend =\n        parseFloat(selectedDividend.cash_amount) *\n        parseCurrency(numberOfShares);\n      setCalculatedDividend(totalDividend.toFixed(2));\n    }\n  };\n\n  const handleReset = () => {\n    setNumberOfShares('');\n    setCalculatedDividend(null);\n    setDividends([]);\n  };\n\n  const handleNumberOfSharesChange = (e) => {\n    const value = e.target.value.replace(/,/g, '');\n    setNumberOfShares(formatNumberWithCommas(value));\n  };\n\n  const handleWatchlistSelectChange = async (e) => {\n    const selectedSymbol = e.target.value;\n    setUserSymbol(selectedSymbol);\n    handleSymbolSelection(selectedSymbol);\n  };\n\n  return (\n    <div className='card dividend-info'>\n      <div className='card-header'>\n        <h5 className='card-title mb-0'>Stock Dividend Information</h5>\n      </div>\n      <div className='card-body'>\n        <form className='form-inline my-2 my-lg-0'>\n          <div className='form-group me-2'>\n            <label htmlFor='symbol'>Stock Symbol: </label>\n            <SymbolAutoSuggest onSymbolSelect={handleSymbolSelection} />\n          </div>\n          <div className='form-group me-2'>\n            <label htmlFor='watchlist'>Watchlist: </label>\n            <select\n              className='form-control'\n              value={userSymbol || ''}\n              onChange={handleWatchlistSelectChange}>\n              <option value='' disabled>\n                Select a Stock from Watchlist\n              </option>\n              {watchlist.map((ticker) => (\n                <option key={ticker} value={ticker}>\n                  {ticker}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className='form-group me-2'>\n            <label htmlFor='numberOfShares'>Number of Shares: </label>\n            <input\n              type='text'\n              className='form-control mx-2'\n              placeholder='Number of Shares'\n              value={numberOfShares}\n              onChange={handleNumberOfSharesChange}\n            />\n            <button\n              type='button'\n              className='btn btn-primary my-2 my-sm-0 ml-2'\n              onClick={handleCalculate}>\n              Calculate\n            </button>\n          </div>\n          <button\n            type='button'\n            className='btn btn-danger my-2 my-sm-0 ml-2'\n            onClick={handleReset}>\n            Reset\n          </button>\n        </form>\n        <div className='mt-3'>\n          <h5>\n            <strong>Total Dividend:</strong> $\n            {formatNumberWithCommas(calculatedDividend) || '0.00'}\n          </h5>\n        </div>\n        <table\n          className={`table table-striped mt-3 ${\n            theme === 'theme-dark' ? 'table-dark' : ''\n          }`}>\n          <thead>\n            <tr>\n              <th>Ticker</th>\n              <th>Cash Amount</th>\n              <th>Declaration Date</th>\n              <th>Dividend Type</th>\n              <th>Ex-Dividend Date</th>\n              <th>Frequency</th>\n              <th>Pay Date</th>\n              <th>Record Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            {dividends.map((dividend, index) => (\n              <tr key={index}>\n                <td>{dividend.ticker}</td>\n                <td>{dividend.cash_amount}</td>\n                <td>{dividend.declaration_date}</td>\n                <td>{dividend.dividend_type}</td>\n                <td>{dividend.ex_dividend_date}</td>\n                <td>{dividend.frequency}</td>\n                <td>{dividend.pay_date}</td>\n                <td>{dividend.record_date}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default DividendInfo;\n","// src/components/SymbolAutoSuggest/SymbolAutoSuggest.js\nimport './SymbolAutoSuggest.scss';\nimport React, { useState, useEffect } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSymbolAndFetchData } from '../../features/user/userThunks';\nimport { fetchSymbolSuggestions } from '../../features/stocks/stockThunks';\nimport { clearSuggestions } from '../../features/stocks/stockSlice';\nimport { selectUserSymbol } from '../../features/user/userSelectors';\n\nconst SymbolAutoSuggest = () => {\n  const dispatch = useDispatch();\n  const selectedSymbol = useSelector(selectUserSymbol);\n  const suggestions = useSelector((state) => state.stocks.suggestions || []);\n  const [query, setQuery] = useState(''); // Local state for the input value\n\n  // Sync the local query state with the Redux selectedSymbol on mount and whenever selectedSymbol changes\n  useEffect(() => {\n    // Check localStorage for a saved stock symbol and update Redux\n    const savedSymbol = localStorage.getItem('selectedStockSymbol');\n    if (savedSymbol && !selectedSymbol) {\n      dispatch(setSymbolAndFetchData(savedSymbol)); // Update Redux with the saved symbol\n    }\n\n    if (selectedSymbol) {\n      setQuery(selectedSymbol); // Update local input if Redux has the symbol\n    }\n  }, [selectedSymbol, dispatch]);\n\n  // Fetch suggestions based on the current input value\n  const onSuggestionsFetchRequested = ({ value }) => {\n    if (value.length < 1) {\n      dispatch(fetchSymbolSuggestions.fulfilled([])); // Clear suggestions in Redux\n      return;\n    }\n    // Dispatch the thunk to fetch suggestions from the API\n    dispatch(fetchSymbolSuggestions(value));\n  };\n\n  const onSuggestionsClearRequested = () => {\n    dispatch(clearSuggestions()); // Dispatch the clearSuggestions action\n  };\n\n  // Handle when a suggestion is selected from the dropdown\n  const onSuggestionSelected = (event, { suggestion }) => {\n    const selectedSymbol = suggestion.ticker;\n    setQuery(selectedSymbol); // Update the input field to show the selected symbol\n    dispatch(setSymbolAndFetchData(selectedSymbol)); // Dispatch to update Redux with the new symbol\n    // Save the selected symbol to localStorage for persistence\n    localStorage.setItem('selectedStockSymbol', selectedSymbol);\n    console.log('Selected symbol:', selectedSymbol);\n  };\n\n  const inputProps = {\n    placeholder: 'Search for a stock',\n    value: query, // Sync the input field with the local query state\n    onChange: (event, { newValue }) => {\n      setQuery(newValue); // Update the local input state only when typing\n    },\n  };\n\n  return (\n    <div className='symbol-auto-suggest'>\n      <Autosuggest\n        suggestions={suggestions} // Use suggestions from Redux state\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        getSuggestionValue={(suggestion) => suggestion.ticker}\n        renderSuggestion={(suggestion) => (\n          <div className='suggestion-item'>\n            <span className='suggestion-ticker'>{suggestion.ticker}</span>\n            <span className='suggestion-name'>{suggestion.name}</span>\n          </div>\n        )}\n        inputProps={inputProps}\n        onSuggestionSelected={onSuggestionSelected} // Dispatch to Redux and persist to localStorage on suggestion selection\n      />\n    </div>\n  );\n};\n\nexport default SymbolAutoSuggest;\n","// format.js\n\n// Function to format a numeric value as a currency string\nexport const formatCurrency = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and remove any non-numeric characters except for periods\n  value = value.toString().replace(/[^0-9.]/g, '');\n\n  // Split the value into integer and decimal parts\n  const parts = value.split('.');\n\n  // Add commas to the integer part of the number for better readability\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  // Join the integer and decimal parts back together and prepend a dollar sign\n  return `$${parts.join('.')}`;\n};\n\n// Function to parse a currency string back into a numeric value\nexport const parseCurrency = (value) => {\n  // Return 0 if the value is null or undefined\n  if (!value) return 0;\n\n  // Remove any non-numeric characters except for periods and convert the result to a float\n  return parseFloat(value.replace(/[^0-9.]/g, '')) || 0;\n};\n\n// Function to format a numeric value with commas as thousand separators\nexport const formatNumberWithCommas = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and add commas as thousand separators\n  return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n\n// Function to format a date to 'YYYY-MM-DD'\nexport const formatDateTime = (date) => {\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = `0${d.getMonth() + 1}`.slice(-2);\n  const day = `0${d.getDate()}`.slice(-2);\n  const hours = `0${d.getHours()}`.slice(-2);\n  const minutes = `0${d.getMinutes()}`.slice(-2);\n  const seconds = `0${d.getSeconds()}`.slice(-2);\n  return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["DividendInfo","dispatch","useDispatch","userSymbol","useSelector","selectUserSymbol","watchlist","state","symbols","dividends","setDividends","useState","numberOfShares","setNumberOfShares","calculatedDividend","setCalculatedDividend","theme","selectTheme","apiKey","process","useEffect","async","response","axios","get","data","results","error","console","fetchDividends","handleSymbolSelection","selectedSymbol","setUserSymbol","_jsxs","className","children","_jsx","htmlFor","SymbolAutoSuggest","onSymbolSelect","value","onChange","e","target","disabled","map","ticker","type","placeholder","replace","formatNumberWithCommas","onClick","handleCalculate","selectedDividend","find","dividend","toUpperCase","totalDividend","parseFloat","cash_amount","parseCurrency","toFixed","handleReset","index","declaration_date","dividend_type","ex_dividend_date","frequency","pay_date","record_date","suggestions","stocks","query","setQuery","savedSymbol","localStorage","getItem","setSymbolAndFetchData","inputProps","event","_ref3","newValue","Autosuggest","onSuggestionsFetchRequested","_ref","length","fetchSymbolSuggestions","fulfilled","onSuggestionsClearRequested","clearSuggestions","getSuggestionValue","suggestion","renderSuggestion","name","onSuggestionSelected","_ref2","setItem","log","formatCurrency","parts","toString","split","join","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes"],"sourceRoot":""}