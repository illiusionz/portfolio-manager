{"version":3,"file":"static/js/892.546c884a.chunk.js","mappings":"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","sources":["components/DividendInfo/DividendInfo.js","utils/format.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  formatNumberWithCommas,\n  formatCurrency,\n  parseCurrency,\n} from '../../utils/format';\nimport { setUserSymbol } from '../../features/user/userSlice'; // Updated path\nimport { fetchStockPrice } from '../../features/stocks/stockThunks'; // Updated path\n\nimport axios from 'axios';\nimport Autosuggest from 'react-autosuggest';\nimport './_dividendInfo.scss';\n\nconst DividendInfo = () => {\n  const symbol = useSelector((state) => state.user.symbol); // Get the selected symbol from the state\n  const watchlist = useSelector((state) => state.watchlist.symbols); // Get the watchlist from the state\n  const [query, setQuery] = useState(symbol || '');\n  const [dividends, setDividends] = useState([]);\n  const [numberOfShares, setNumberOfShares] = useState('');\n  const [calculatedDividend, setCalculatedDividend] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const theme = useSelector((state) => state.theme);\n  const dispatch = useDispatch();\n\n  const apiKey = process.env.REACT_APP_POLYGON_API_KEY;\n\n  useEffect(() => {\n    const fetchDividends = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.polygon.io/v3/reference/dividends?ticker=${symbol}&apiKey=${apiKey}`\n        );\n        setDividends(response.data.results || []);\n      } catch (error) {\n        console.error('Error fetching dividend data:', error);\n      }\n    };\n\n    if (symbol) {\n      setQuery(symbol);\n      fetchDividends();\n    }\n  }, [symbol]);\n\n  const onSuggestionsFetchRequested = async ({ value }) => {\n    try {\n      const response = await axios.get(\n        `https://api.polygon.io/v3/reference/tickers?search=${value}&active=true&sort=ticker&order=asc&limit=10&apiKey=${apiKey}`\n      );\n      setSuggestions(response.data.results || []);\n    } catch (error) {\n      console.error('Error fetching suggestions:', error);\n      setSuggestions([]);\n    }\n  };\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const getSuggestionValue = (suggestion) => suggestion.ticker;\n\n  const renderSuggestion = (suggestion) => (\n    <div className='suggestion-item'>\n      <span className='suggestion-ticker'>{suggestion.ticker}</span>\n      <span className='suggestion-name'>{suggestion.name}</span>\n    </div>\n  );\n\n  const onChange = (event, { newValue }) => {\n    setQuery(newValue);\n  };\n\n  const onSuggestionSelected = async (event, { suggestion }) => {\n    const selectedSymbol = suggestion.ticker;\n    try {\n      const response = await axios.get(\n        `https://api.polygon.io/v3/reference/dividends?ticker=${selectedSymbol}&apiKey=${apiKey}`\n      );\n      dispatch(setUserSymbol(selectedSymbol));\n      setDividends(response.data.results || []);\n      setQuery(selectedSymbol);\n    } catch (error) {\n      console.error('Error fetching dividend data:', error);\n    }\n  };\n\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    const searchSymbol = query.split(' - ')[0];\n    try {\n      const response = await axios.get(\n        `https://api.polygon.io/v3/reference/dividends?ticker=${searchSymbol}&apiKey=${apiKey}`\n      );\n      setDividends(response.data.results || []);\n    } catch (error) {\n      console.error('Error fetching dividend data:', error);\n    }\n  };\n\n  const handleCalculate = () => {\n    const selectedDividend = dividends.find(\n      (dividend) => dividend.ticker === query.toUpperCase()\n    );\n    if (selectedDividend && numberOfShares) {\n      const totalDividend =\n        parseFloat(selectedDividend.cash_amount) *\n        parseCurrency(numberOfShares);\n      setCalculatedDividend(totalDividend.toFixed(2));\n    }\n  };\n\n  const handleReset = () => {\n    setQuery('');\n    setNumberOfShares('');\n    setCalculatedDividend(null);\n    setDividends([]);\n    setSuggestions([]);\n  };\n\n  const handleNumberOfSharesChange = (e) => {\n    const value = e.target.value.replace(/,/g, '');\n    setNumberOfShares(formatNumberWithCommas(value));\n  };\n\n  const handleSelectChange = async (e) => {\n    const selectedSymbol = e.target.value;\n    setQuery(selectedSymbol);\n    dispatch(setUserSymbol(selectedSymbol));\n    try {\n      const response = await axios.get(\n        `https://api.polygon.io/v3/reference/dividends?ticker=${selectedSymbol}&apiKey=${apiKey}`\n      );\n      setDividends(response.data.results || []);\n    } catch (error) {\n      console.error('Error fetching dividend data:', error);\n    }\n  };\n\n  const inputProps = {\n    placeholder: 'Search for a stock',\n    value: query,\n    onChange: onChange,\n  };\n\n  return (\n    <div className='card dividend-info'>\n      <div className='card-header'>\n        <h5 className='card-title mb-0'>Stock Dividend Information</h5>\n      </div>\n      <div className='card-body'>\n        <form className='form-inline my-2 my-lg-0' onSubmit={handleSearch}>\n          <div className='form-group me-5'>\n            <input\n              type='text'\n              className='form-control mx-2'\n              placeholder='Number of Shares'\n              value={numberOfShares}\n              onChange={handleNumberOfSharesChange}\n            />\n            <button\n              type='button'\n              className='btn btn-primary my-2 my-sm-0 ml-2'\n              onClick={handleCalculate}>\n              Calculate Dividend\n            </button>\n          </div>\n          <div className='form-group me-5'>\n            <select\n              className='form-control'\n              value={query}\n              onChange={handleSelectChange}>\n              <option value='' disabled>\n                Select a Stock\n              </option>\n              {watchlist.map((ticker) => (\n                <option key={ticker} value={ticker}>\n                  {ticker}\n                </option>\n              ))}\n            </select>\n          </div>\n          <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={onSuggestionsClearRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            inputProps={inputProps}\n            onSuggestionSelected={onSuggestionSelected}\n          />\n          <button\n            className='btn btn-primary my-2 my-sm-0 ms-3 mx-3'\n            type='submit'>\n            Search\n          </button>\n          <button\n            type='button'\n            className='btn btn-danger my-2 my-sm-0 ml-2'\n            onClick={handleReset}>\n            Reset\n          </button>\n        </form>\n        <div className='mt-3'>\n          <h5>\n            <strong>Total Dividend:</strong> $\n            {formatNumberWithCommas(calculatedDividend) || '0.00'}\n          </h5>\n        </div>\n        <table\n          className={`table table-striped mt-3 ${\n            theme === 'dark' ? 'table-dark' : ''\n          }`}>\n          <thead>\n            <tr>\n              <th>Ticker</th>\n              <th>Cash Amount</th>\n              <th>Declaration Date</th>\n              <th>Dividend Type</th>\n              <th>Ex-Dividend Date</th>\n              <th>Frequency</th>\n              <th>Pay Date</th>\n              <th>Record Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            {dividends.map((dividend, index) => (\n              <tr key={index}>\n                <td>{dividend.ticker}</td>\n                <td>{dividend.cash_amount}</td>\n                <td>{dividend.declaration_date}</td>\n                <td>{dividend.dividend_type}</td>\n                <td>{dividend.ex_dividend_date}</td>\n                <td>{dividend.frequency}</td>\n                <td>{dividend.pay_date}</td>\n                <td>{dividend.record_date}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default DividendInfo;\n","// format.js\n\n// Function to format a numeric value as a currency string\nexport const formatCurrency = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and remove any non-numeric characters except for periods\n  value = value.toString().replace(/[^0-9.]/g, '');\n\n  // Split the value into integer and decimal parts\n  const parts = value.split('.');\n\n  // Add commas to the integer part of the number for better readability\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  // Join the integer and decimal parts back together and prepend a dollar sign\n  return `$${parts.join('.')}`;\n};\n\n// Function to parse a currency string back into a numeric value\nexport const parseCurrency = (value) => {\n  // Return 0 if the value is null or undefined\n  if (!value) return 0;\n\n  // Remove any non-numeric characters except for periods and convert the result to a float\n  return parseFloat(value.replace(/[^0-9.]/g, '')) || 0;\n};\n\n// Function to format a numeric value with commas as thousand separators\nexport const formatNumberWithCommas = (value) => {\n  // Return an empty string if the value is null or undefined\n  if (!value) return '';\n\n  // Convert the value to a string and add commas as thousand separators\n  return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["DividendInfo","symbol","useSelector","state","user","watchlist","symbols","query","setQuery","useState","dividends","setDividends","numberOfShares","setNumberOfShares","calculatedDividend","setCalculatedDividend","suggestions","setSuggestions","theme","dispatch","useDispatch","apiKey","process","useEffect","async","response","axios","get","data","results","error","console","fetchDividends","inputProps","placeholder","value","onChange","event","_ref2","newValue","_jsxs","className","children","_jsx","onSubmit","e","preventDefault","searchSymbol","split","type","target","replace","formatNumberWithCommas","onClick","handleCalculate","selectedDividend","find","dividend","ticker","toUpperCase","totalDividend","parseFloat","cash_amount","parseCurrency","toFixed","selectedSymbol","setUserSymbol","disabled","map","Autosuggest","onSuggestionsFetchRequested","_ref","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","name","onSuggestionSelected","_ref3","handleReset","index","declaration_date","dividend_type","ex_dividend_date","frequency","pay_date","record_date","formatCurrency","parts","toString","join","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes"],"sourceRoot":""}