{"version":3,"file":"static/js/436.0f15d0b6.chunk.js","mappings":"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","sources":["components/TopMovers/TopMovers.js"],"sourcesContent":["// src/components/TopMovers/TopMovers.js\nimport './TopMovers.scss';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectTheme } from '../../features/theme/themeSelectors';\n\nconst TopMovers = () => {\n  const [gainers, setGainers] = useState([]);\n  const [losers, setLosers] = useState([]);\n  const [activeTab, setActiveTab] = useState('gainers');\n  const [currentPage, setCurrentPage] = useState(1);\n  const theme = useSelector(selectTheme);\n\n  const resultsPerPage = 10;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const gainersResponse = await axios.get(\n          'https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/gainers?apiKey=6kf3MOEaHc3lbVrjKbqgjqcOo7pgMZmq'\n        );\n        const losersResponse = await axios.get(\n          'https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/losers?apiKey=6kf3MOEaHc3lbVrjKbqgjqcOo7pgMZmq'\n        );\n\n        setGainers(gainersResponse.data.tickers);\n        setLosers(losersResponse.data.tickers);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const paginate = (items, pageNumber, itemsPerPage) => {\n    const startIndex = (pageNumber - 1) * itemsPerPage;\n    return items.slice(startIndex, startIndex + itemsPerPage);\n  };\n\n  const totalPages = (items, itemsPerPage) => {\n    return Math.ceil(items.length / itemsPerPage);\n  };\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n  };\n\n  const renderTableRows = (stocks) => {\n    const paginatedStocks = paginate(stocks, currentPage, resultsPerPage);\n    return paginatedStocks.map((stock) => (\n      <tr key={stock.ticker}>\n        <td>{stock.ticker}</td>\n        <td>{stock.day.c}</td>\n        <td>{stock.todaysChange.toFixed(2)}</td>\n        <td>{stock.todaysChangePerc.toFixed(2)}%</td>\n        <td>{(stock.day.v / 1e6).toFixed(2)}M</td>\n      </tr>\n    ));\n  };\n\n  const renderPagination = (items) => {\n    const pages = totalPages(items, resultsPerPage);\n    const pageNumbers = [];\n    for (let i = 1; i <= pages; i++) {\n      pageNumbers.push(i);\n    }\n    return (\n      <nav>\n        <ul className='pagination justify-content-center'>\n          {pageNumbers.map((number) => (\n            <li\n              key={number}\n              className={`page-item ${number === currentPage ? 'active' : ''}`}>\n              <button\n                className='page-link'\n                onClick={() => handlePageChange(number)}>\n                {number}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    );\n  };\n\n  const activeItems = activeTab === 'gainers' ? gainers : losers;\n\n  return (\n    <div className='card top-movers'>\n      <div className='card-header'>\n        <ul className='nav nav-tabs card-header-tabs'>\n          <li className='nav-item'>\n            <button\n              className={`nav-link ${activeTab === 'gainers' ? 'active' : ''}`}\n              onClick={() => {\n                setActiveTab('gainers');\n                setCurrentPage(1);\n              }}>\n              Top Gainers\n            </button>\n          </li>\n          <li className='nav-item'>\n            <button\n              className={`nav-link ${activeTab === 'losers' ? 'active' : ''}`}\n              onClick={() => {\n                setActiveTab('losers');\n                setCurrentPage(1);\n              }}>\n              Top Losers\n            </button>\n          </li>\n        </ul>\n      </div>\n      <div className='card-body'>\n        <div className='table-responsive'>\n          <table\n            className={`table table-striped ${\n              theme === 'theme-dark' ? 'table-dark' : ''\n            }`}>\n            <thead>\n              <tr>\n                <th>Symbol</th>\n                <th>Last</th>\n                <th>Chg</th>\n                <th>Chg%</th>\n                <th>Vol</th>\n              </tr>\n            </thead>\n            <tbody>{renderTableRows(activeItems)}</tbody>\n          </table>\n        </div>\n        {renderPagination(activeItems)}\n      </div>\n    </div>\n  );\n};\n\nexport default TopMovers;\n"],"names":["TopMovers","gainers","setGainers","useState","losers","setLosers","activeTab","setActiveTab","currentPage","setCurrentPage","theme","useSelector","selectTheme","useEffect","async","gainersResponse","axios","get","losersResponse","data","tickers","error","console","fetchData","activeItems","_jsxs","className","children","_jsx","onClick","stocks","paginate","items","pageNumber","itemsPerPage","startIndex","slice","map","stock","ticker","day","c","todaysChange","toFixed","todaysChangePerc","v","pages","totalPages","Math","ceil","length","pageNumbers","i","push","number","renderPagination"],"sourceRoot":""}