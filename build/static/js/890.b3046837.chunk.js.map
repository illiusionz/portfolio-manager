{"version":3,"file":"static/js/890.b3046837.chunk.js","mappings":"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","sources":["components/EarningsCalendar/EarningsCalendar.js","pages/CalendarPage/CalendarPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n  Box,\n  Button,\n  CircularProgress,\n  Paper,\n  Typography,\n  TextField,\n} from '@mui/material';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker'; // Correctly import DatePicker\nimport { format } from 'date-fns';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\n\n// Function to transform the nested earnings data to a flat array\nconst transformEarningsData = (earnings) => {\n  const result = [];\n\n  for (const date in earnings) {\n    const stocks = earnings[date].stocks || [];\n    stocks.forEach((stock) => {\n      result.push({\n        date: date,\n        ticker: stock.symbol,\n        companyName: stock.title,\n        earningsDate: stock.date,\n        earningsTime: stock.time,\n        importance: stock.importance,\n      });\n    });\n  }\n\n  return result;\n};\n\nconst EarningsCalendar = () => {\n  const [startDate, setStartDate] = useState(new Date('2024-09-01')); // Default to the start of the month\n  const [endDate, setEndDate] = useState(new Date('2024-09-24')); // Default to today\n  const [earnings, setEarnings] = useState([]);\n  const [transformedData, setTransformedData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchEarnings = async () => {\n    setLoading(true); // Set loading state to true\n    try {\n      const response = await axios.get(\n        `https://cors-anywhere.herokuapp.com/https://api.stocktwits.com/api/2/discover/earnings_calendar`,\n        {\n          params: {\n            date_from: format(startDate, 'yyyy-MM-dd'),\n            date_to: format(endDate, 'yyyy-MM-dd'),\n          },\n        }\n      );\n\n      const earningsData = response.data.earnings || {};\n      setEarnings(earningsData);\n    } catch (error) {\n      console.error('Error fetching earnings data:', error);\n    } finally {\n      setLoading(false); // Set loading state to false\n    }\n  };\n\n  // Fetch earnings data when the component first loads\n  useEffect(() => {\n    fetchEarnings();\n  }, []);\n\n  // Transform earnings data whenever earnings state changes\n  useEffect(() => {\n    setTransformedData(transformEarningsData(earnings));\n  }, [earnings]);\n\n  return (\n    <div className='container mt-5'>\n      <h2 className='mb-4'>Earnings Calendar</h2>\n      <div className='row mb-3'>\n        <div className='col-md-4'>\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <DatePicker\n              label='Start Date'\n              value={startDate}\n              onChange={(newValue) => setStartDate(newValue)}\n              renderInput={(params) => <TextField {...params} />}\n            />\n          </LocalizationProvider>\n        </div>\n        <div className='col-md-4'>\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <DatePicker\n              label='End Date'\n              value={endDate}\n              onChange={(newValue) => setEndDate(newValue)}\n              renderInput={(params) => <TextField {...params} />}\n            />\n          </LocalizationProvider>\n        </div>\n        <div className='col-md-4 d-flex align-items-end'>\n          <Button variant='contained' color='primary' onClick={fetchEarnings}>\n            Fetch Earnings\n          </Button>\n        </div>\n      </div>\n      {loading ? (\n        <div className='d-flex justify-content-center'>\n          <CircularProgress />\n        </div>\n      ) : (\n        <table className='table table-striped table-hover'>\n          <thead className='thead-dark'>\n            <tr>\n              <th>Date</th>\n              <th>Ticker</th>\n              <th>Company Name</th>\n              <th>Earnings Date</th>\n              <th>Earnings Time</th>\n              <th>Importance</th>\n            </tr>\n          </thead>\n          <tbody>\n            {transformedData.length > 0 ? (\n              transformedData.map((item, index) => (\n                <tr key={index}>\n                  <td>{item.date}</td>\n                  <td>{item.ticker}</td>\n                  <td>{item.companyName}</td>\n                  <td>{item.earningsDate}</td>\n                  <td>{item.earningsTime}</td>\n                  <td>{item.importance}</td>\n                </tr>\n              ))\n            ) : (\n              <tr>\n                <td colSpan='6'>No data available for selected dates</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default EarningsCalendar;\n","import React, { useState } from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css'; // Import the CSS file\nimport './CalendarPage.scss';\nimport EarningsCalendar from '../../components/EarningsCalendar/EarningsCalendar';\n\nconst localizer = momentLocalizer(moment);\n\nconst myEventsList = [\n  {\n    title: 'Meeting with Alex',\n    start: new Date(2024, 9, 19, 10, 0), // Year, Month (0-based), Date, Hour, Minute\n    end: new Date(2024, 9, 19, 12, 0),\n  },\n  {\n    title: 'Conference Call',\n    start: new Date(2024, 9, 20, 14, 0),\n    end: new Date(2024, 9, 20, 15, 0),\n  },\n  {\n    title: 'Team Standup',\n    start: new Date(2024, 9, 21, 9, 0),\n    end: new Date(2024, 9, 21, 10, 0),\n  },\n];\n\nconst CalendarPage = () => {\n  const [events, setEvents] = useState(myEventsList);\n\n  return (\n    <div className='container mt-4' style={{ height: '100vh' }}>\n      <h2>My Calendar</h2>\n      <Calendar\n        localizer={localizer}\n        events={events}\n        startAccessor='start'\n        endAccessor='end'\n        style={{ height: 500 }}\n        defaultView='month' // You can set this to \"month\", \"week\", \"day\", or \"agenda\"\n        views={['month', 'week', 'day']}\n      />\n\n      <EarningsCalendar />\n    </div>\n  );\n};\n\nexport default CalendarPage;\n"],"names":["EarningsCalendar","startDate","setStartDate","useState","Date","endDate","setEndDate","earnings","setEarnings","transformedData","setTransformedData","loading","setLoading","fetchEarnings","async","earningsData","axios","get","params","date_from","format","date_to","data","error","console","useEffect","result","date","stocks","forEach","stock","push","ticker","symbol","companyName","title","earningsDate","earningsTime","time","importance","transformEarningsData","_jsxs","className","children","_jsx","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","label","value","onChange","newValue","renderInput","TextField","Button","variant","color","onClick","CircularProgress","length","map","item","index","colSpan","localizer","momentLocalizer","moment","myEventsList","start","end","CalendarPage","events","setEvents","style","height","Calendar","startAccessor","endAccessor","defaultView","views"],"sourceRoot":""}